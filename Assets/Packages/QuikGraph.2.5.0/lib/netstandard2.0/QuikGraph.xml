<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuikGraph</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:QuikGraph.Utils.DisposableHelpers">
            <summary>
            Helpers to work with <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:QuikGraph.Utils.DisposableHelpers.Finally(System.Action)">
            <summary>
            Calls an action when going out of scope.
            </summary>
            <param name="action">The action to call.</param>
            <returns>A <see cref="T:System.IDisposable"/> object to give to a using clause.</returns>
        </member>
        <member name="M:QuikGraph.Utils.DisposableHelpers.FinallyScope.Dispose">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Utils.MathUtils">
            <summary>
            Math utilities.
            </summary>
        </member>
        <member name="F:QuikGraph.Utils.MathUtils.DoubleEpsilon">
            <summary>
            Smallest value such that 1.0+<see cref="F:QuikGraph.Utils.MathUtils.DoubleEpsilon"/> != 1.0
            </summary>
        </member>
        <member name="M:QuikGraph.Utils.MathUtils.IsZero(System.Double)">
            <summary>
            Returns whether or not the double is "close" to 0, but this is faster.
            </summary>
            <returns>The result of the comparision.</returns>
            <param name="a">The double to compare to 0.</param>
        </member>
        <member name="M:QuikGraph.Utils.MathUtils.NearEqual(System.Double,System.Double)">
            <summary>
            Returns whether or not two <see cref="T:System.Double"/>s are "equal". That is, whether or
            not they are within epsilon of each other.
            </summary>
            <param name="a">The first <see cref="T:System.Double"/> to compare.</param>
            <param name="b">The second <see cref="T:System.Double"/> to compare.</param>
            <returns>The result of the comparision.</returns>
        </member>
        <member name="T:QuikGraph.Utils.CryptoRandom">
            <summary>
            Secure random number generator.
            </summary>
            <remarks>
            Note that because of security issue the seed is unused in this random number generator.
            Note also that it is slower than classic <see cref="T:System.Random"/> but on purpose.
            </remarks>
        </member>
        <member name="M:QuikGraph.Utils.CryptoRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Utils.CryptoRandom"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Utils.CryptoRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Utils.CryptoRandom"/> class.
            </summary>
            <param name="ignoredSeed">Seed is ignored, just to keep same API as <see cref="T:System.Random"/>.</param>
        </member>
        <member name="M:QuikGraph.Utils.CryptoRandom.Next">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Utils.CryptoRandom.Next(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Utils.CryptoRandom.Next(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Utils.CryptoRandom.NextDouble">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Utils.CryptoRandom.NextBytes(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.AlgorithmBase`1">
            <summary>
            Base class for all graph algorithm.
            </summary>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.AlgorithmBase`1"/> class (with optional host).
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.AlgorithmBase`1"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.AlgorithmBase`1.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.AlgorithmBase`1.State">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.Compute">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Something went wrong when running the algorithm.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.Abort">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.AlgorithmBase`1.StateChanged">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.OnStateChanged(System.EventArgs)">
            <summary>
            Called on algorithm state changed.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="E:QuikGraph.Algorithms.AlgorithmBase`1.Started">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.OnStarted(System.EventArgs)">
            <summary>
            Called on algorithm start.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="E:QuikGraph.Algorithms.AlgorithmBase`1.Finished">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.OnFinished(System.EventArgs)">
            <summary>
            Called on algorithm finished.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="E:QuikGraph.Algorithms.AlgorithmBase`1.Aborted">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.OnAborted(System.EventArgs)">
            <summary>
            Called on algorithm abort.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.AlgorithmBase`1.Services">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.GetService``1">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Requested service is not present on algorithm.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.TryGetService``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.TryGetService(System.Type,System.Object@)">
            <summary>
            Tries to get the service with given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Service type.</param>
            <param name="service">Found service.</param>
            <returns>True if the service was found, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.ThrowIfCancellationRequested">
            <summary>
            Throws if a cancellation of the algorithm was requested.
            </summary>
            <exception cref="T:System.OperationCanceledException">
            If the algorithm cancellation service indicates <see cref="P:QuikGraph.Algorithms.Services.ICancelManager.IsCancelling"/> is true.
            </exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.Initialize">
            <summary>
            Called on algorithm initialization step.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.InternalCompute">
            <summary>
            Algorithm compute step.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmBase`1.Clean">
            <summary>
            Called on algorithm cleanup step.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.Assignment.HungarianAlgorithm">
            <summary>
            A combinatorial optimization algorithm that solves the assignment problem, meaning
            finding, in a weighted bipartite graph, a matching in which the sum of weights of the
            edges is as large as possible.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps">
            <summary>
            Hungarian algorithm steps.
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Hungarian_algorithm </remarks>
        </member>
        <member name="F:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps.Init">
            <summary>
            Initialization step.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps.Step1">
            <summary>
            Step 1.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps.Step2">
            <summary>
            Step 2.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps.Step3">
            <summary>
            Step 3.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps.Step4">
            <summary>
            Step 4.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps.End">
            <summary>
            End step.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.AgentsTasks">
            <summary>
            Computed assignments.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.#ctor(System.Int32[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Assignment.HungarianAlgorithm"/> class.
            </summary>
            <param name="costs">Costs matrix.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="costs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Compute">
            <summary>
            Returns assignments (without visualization).
            </summary>
            <returns>Array of assignments.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.GetIterations">
            <summary>
            Returns iterations that can be used to visualize the algorithm.
            </summary>
            <returns>An enumerable of algorithm iterations.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Location">
            <summary>
             Represents coordinates: raw and column number.
             </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.Assignment.HungarianIteration">
            <summary>
            State of an iteration of the Hungarian algorithm.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Assignment.HungarianIteration.Matrix">
            <summary>
            Costs matrix.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Assignment.HungarianIteration.Mask">
            <summary>
            Matrix mask.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Assignment.HungarianIteration.RowsCovered">
            <summary>
            Array of treated rows.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Assignment.HungarianIteration.ColumnsCovered">
            <summary>
            Array of treated columns.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Assignment.HungarianIteration.Step">
            <summary>
            <see cref="T:QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps"/> corresponding to this iteration.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Assignment.HungarianIteration.#ctor(System.Int32[0:,0:],System.Byte[0:,0:],System.Boolean[],System.Boolean[],QuikGraph.Algorithms.Assignment.HungarianAlgorithm.Steps)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Assignment.HungarianIteration"/> struct.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase`2">
            <summary>
            Base class for all maximum clique graph algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Cliques.MaximumCliqueAlgorithmBase`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.ComponentWithEdges">
            <summary>
            Enumeration of possible cases for component with edges in a graph.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComponentWithEdges.NoComponent">
            <summary>
            Graph has no component.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComponentWithEdges.OneComponent">
            <summary>
            Graph has only one component.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComponentWithEdges.ManyComponents">
            <summary>
            Graph has many components.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.ComputationState">
            <summary>
            The computation state of a graph algorithm.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComputationState.NotRunning">
            <summary>
            The algorithm is not running.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComputationState.Running">
            <summary>
            The algorithm is running.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComputationState.PendingAbortion">
            <summary>
            An abort has been requested. The algorithm is still running and will
            cancel as soon as it checks the cancellation state.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComputationState.Finished">
            <summary>
            The computation is finished successfully.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.ComputationState.Aborted">
            <summary>
            The computation was aborted.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3">
            <summary>
            Algorithm that condensate a graph with strongly (or not) components.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3.CondensedGraph">
            <summary>
            Condensed graph.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3.StronglyConnected">
            <summary>
            Gets or sets the strongly connected components flag.
            Indicates if the algorithm should do strongly connected components or not.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3.EdgeKey.Equals(QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm{`0,`1,`2}.EdgeKey)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3.EdgeKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.CondensationGraphAlgorithm`3.EdgeKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Condensation.CondensedEdge`3">
            <summary>
            An edge connecting two graphs.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.CondensedEdge`3.#ctor(`2,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Condensation.CondensedEdge`3"/> class.
            </summary>
            <param name="source">The source graph.</param>
            <param name="target">The target graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Condensation.CondensedEdge`3.Edges">
            <summary>
            Edges between source and target graphs.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm`2">
            <summary>
            Algorithm that condensate edges of a graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1},QuikGraph.IMutableBidirectionalGraph{`0,QuikGraph.Algorithms.Condensation.MergedEdge{`0,`1}},QuikGraph.VertexPredicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="condensedGraph">Graph that will contains the condensation of the <paramref name="visitedGraph"/>.</param>
            <param name="vertexPredicate">Vertex predicate used to filter the vertices to put in the condensed graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="condensedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm`2.CondensedGraph">
            <summary>
            Condensed graph.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm`2.VertexPredicate">
            <summary>
            Vertex predicate used to filter the vertices to put in the condensed graph.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.EdgeMergeCondensationGraphAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Condensation.MergedEdge`2">
            <summary>
            An edge that merge several other edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.MergedEdge`2.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Condensation.MergedEdge`2"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Condensation.MergedEdge`2.Edges">
            <summary>
            Merged edges.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.MergedEdge`2.Merge(QuikGraph.Algorithms.Condensation.MergedEdge{`0,`1},QuikGraph.Algorithms.Condensation.MergedEdge{`0,`1})">
            <summary>
            Merges the given two edges.
            </summary>
            <param name="inEdge">First edge.</param>
            <param name="outEdge">Second edge.</param>
            <returns>The merged edge.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inEdge"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="outEdge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Condensation.MergedEdge">
            <summary>
            Helpers for <see cref="T:QuikGraph.Algorithms.Condensation.MergedEdge`2"/>.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Condensation.MergedEdge.Merge``2(QuikGraph.Algorithms.Condensation.MergedEdge{``0,``1},QuikGraph.Algorithms.Condensation.MergedEdge{``0,``1})">
            <inheritdoc cref="M:QuikGraph.Algorithms.Condensation.MergedEdge`2.Merge(QuikGraph.Algorithms.Condensation.MergedEdge{`0,`1},QuikGraph.Algorithms.Condensation.MergedEdge{`0,`1})"/>
        </member>
        <member name="T:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2">
            <summary>
            Algorithm that computes connected components of a graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="components">Graph components.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="components">Graph components.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2.ComponentCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.ConnectedComponentsAlgorithm`2.Components">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2">
            <summary>
            Algorithm that incrementally computes connected components of a growing graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeSet{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableVertexAndEdgeSet{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2.ComponentCount">
            <summary>
            Number of components.
            </summary>
            <exception cref="T:System.InvalidOperationException">The algorithm has not been run.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2.GetComponents">
            <summary>
            Gets a copy of the connected components. Key is the number of components,
            Value contains the vertex -> component index map.
            </summary>
            <returns>Number of components associated to components vertex mapping.</returns>
            <exception cref="T:System.InvalidOperationException">The algorithm has not been run.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2">
            <summary>
            Algorithm that computes strongly connected components of a graph.
            </summary>
            <remarks>
            A strongly connected component is a sub graph where there is a path from every
            vertex to every other vertices.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="components">Graph components.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="components">Graph components.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.Roots">
            <summary>
            Root vertices associated to their minimal linked vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.DiscoverTimes">
            <summary>
            Times of vertices discover.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.Steps">
            <summary>
            Number of steps spent.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.ComponentsPerStep">
            <summary>
            Number of components discovered per step.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.VerticesPerStep">
            <summary>
            Vertices treated per step.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.Graphs">
            <summary>
            Strongly connected components.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.ComponentCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.Components">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2">
            <summary>
            Algorithm that computes weakly connected components of a graph.
            </summary>
            <remarks>
            A weakly connected component is a maximal sub graph of a graph such that for
            every pair of vertices (u,v) in the sub graph, there is an undirected path from u to v
            and a directed path from v to u.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="components">Graph components.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="components">Graph components.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.Graphs">
            <summary>
            Weakly connected components.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.Clean">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.ComponentCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ConnectedComponents.WeaklyConnectedComponentsAlgorithm`2.Components">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.DistanceRelaxers">
            <summary>
            Implementation of several distance relaxers.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.DistanceRelaxers.ShortestDistance">
            <summary>
            Shortest distance relaxer.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.DistanceRelaxers.ShortestDistanceRelaxer.InitialDistance">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.DistanceRelaxers.ShortestDistanceRelaxer.Compare(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.DistanceRelaxers.ShortestDistanceRelaxer.Combine(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="F:QuikGraph.Algorithms.DistanceRelaxers.CriticalDistance">
            <summary>
            Critical distance relaxer.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.DistanceRelaxers.CriticalDistanceRelaxer.InitialDistance">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.DistanceRelaxers.CriticalDistanceRelaxer.Compare(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.DistanceRelaxers.CriticalDistanceRelaxer.Combine(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="F:QuikGraph.Algorithms.DistanceRelaxers.EdgeShortestDistance">
            <summary>
            Edge shortest distance relaxer.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.DistanceRelaxers.EdgeDistanceRelaxer.InitialDistance">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.DistanceRelaxers.EdgeDistanceRelaxer.Compare(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.DistanceRelaxers.EdgeDistanceRelaxer.Combine(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="F:QuikGraph.Algorithms.DistanceRelaxers.Prim">
            <summary>
            Prim relaxer.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.EulerianTrailAlgorithm`2">
            <summary>
            Algorithm that find Eulerian path in a graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.EulerianTrailAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.EulerianTrailAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.Circuit">
            <summary>
            Circuit.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.TreeEdge">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.CircuitEdge">
            <summary>
            Fired when an edge is added to the circuit.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.VisitEdge">
            <summary>
            Fired when an edge is visited.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.Visit">
            <summary>
            Looks for a new path to add to the current vertex.
            </summary>
            <returns>True a new path was found, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.ComputeEulerianPathCount(QuikGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Computes the number of Eulerian trails in the graph.
            </summary>
            <param name="graph">Graph to visit.</param>
            <returns>Number of Eulerian trails.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.CircuitAugmentation">
            <summary>
            Merges the temporary circuit with the current circuit.
            </summary>
            <returns>True if all the graph edges are in the circuit.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.AddTemporaryEdges(QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Adds temporary edges to the graph to make all vertex even.
            </summary>
            <param name="edgeFactory">Edge factory method.</param>
            <returns>Temporary edges list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            Number of odd vertices is not even, failed to add temporary edge to <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>,
            or failed to compute eulerian trail.
            </exception>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.RemoveTemporaryEdges">
            <summary>
            Removes temporary edges.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.Trails">
            <summary>
            Computes the set of Eulerian trails that traverse the edge set.
            </summary>
            <remarks>
            This method returns a set of disjoint Eulerian trails. This set
            of trails spans the entire set of edges.
            </remarks>
            <returns>Eulerian trail set.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.EulerianTrailAlgorithm`2.Trails(`0)">
            <summary>
            Computes a set of Eulerian trails, starting at <paramref name="startingVertex"/>
            that spans the entire graph.
            </summary>
            <remarks>
            <para>
            This method computes a set of Eulerian trails starting at <paramref name="startingVertex"/>
            that spans the entire graph. The algorithm outline is as follows:
            </para>
            <para>
            The algorithms iterates through the Eulerian circuit of the augmented
            graph (the augmented graph is the graph with additional edges to make
            the number of odd vertices even).
            </para>
            <para>
            If the current edge is not temporary, it is added to the current trail.
            </para>
            <para>
            If the current edge is temporary, the current trail is finished and
            added to the trail collection. The shortest path between the 
            start vertex <paramref name="startingVertex"/> and the target vertex of the
            temporary edge is then used to start the new trail. This shortest
            path is computed using the <see cref="T:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2"/>.
            </para>
            </remarks>
            <param name="startingVertex">Starting vertex.</param>
            <returns>Eulerian trail set, all starting at <paramref name="startingVertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="startingVertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Eulerian trail not computed yet.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2">
            <summary>
            Algorithm that explores a graph starting from a given vertex.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeSet{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableVertexAndEdgeSet{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2._transitionFactories">
            <summary>
            Transitions factories.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.AddVertexPredicate">
            <summary>
            Predicate that a vertex must match to be added in the graph.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set value is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.ExploreVertexPredicate">
            <summary>
            Predicate that checks if a given vertex should be explored or ignored.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set value is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.AddEdgePredicate">
            <summary>
            Predicate that an edge must match to be added in the graph.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set value is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.FinishedPredicate">
            <summary>
            Predicate that checks if the exploration is finished or not.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set value is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.UnExploredVertices">
            <summary>
            Gets the enumeration of unexplored vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.FinishedSuccessfully">
            <summary>
            Indicates if the algorithm finished successfully or not.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is encountered.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.BackEdge">
            <summary>
            Fired when a back edge is encountered.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.EdgeSkipped">
            <summary>
            Fired when an edge was skipped from exploration due to failed vertex or edge predicate check.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.AddTransitionFactory(QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1})">
            <summary>
            Adds a new <see cref="T:QuikGraph.Algorithms.Exploration.ITransitionFactory`2"/> to this algorithm.
            </summary>
            <param name="transitionFactory">Transition factory to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="transitionFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.AddTransitionFactories(System.Collections.Generic.IEnumerable{QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1}})">
            <summary>
            Adds new <see cref="T:QuikGraph.Algorithms.Exploration.ITransitionFactory`2"/>s to this algorithm.
            </summary>
            <param name="transitionFactories">Transition factories to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="transitionFactories"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.RemoveTransitionFactory(QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1})">
            <summary>
            Removes the given <paramref name="transitionFactory"/> from this algorithm.
            </summary>
            <param name="transitionFactory">Transition factory to remove.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.ClearTransitionFactories">
            <summary>
            Clears all <see cref="T:QuikGraph.Algorithms.Exploration.ITransitionFactory`2"/> from this algorithm.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.ContainsTransitionFactory(QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1})">
            <summary>
            Checks if this algorithm contains the given <paramref name="transitionFactory"/>.
            </summary>
            <param name="transitionFactory">Transition factory to check.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.Compute(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate">
            <summary>
            Default implementation of the finished predicate.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate"/> class.
            </summary>
            <param name="maxVertexCount">Maximum number of vertices.</param>
            <param name="maxEdgeCount">Maximum number of edges.</param>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate.MaxVertexCount">
            <summary>
            Maximum number of vertices (for exploration).
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate.MaxEdgeCount">
            <summary>
            Maximum number of edges (for exploration).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm`2.DefaultFinishedPredicate.Test(QuikGraph.Algorithms.Exploration.CloneableVertexGraphExplorerAlgorithm{`0,`1})">
            <summary>
            Checks if the given <paramref name="algorithm"/> explorer has finished or not.
            </summary>
            <param name="algorithm">Algorithm explorer to check.</param>
            <returns>True if the explorer can continue to explore, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithm"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Exploration.ITransitionFactory`2">
            <summary>
            Represents a transition factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.ITransitionFactory`2.IsValid(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is valid or not.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the vertex is valid, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.ITransitionFactory`2.Apply(`0)">
            <summary>
            Applies the transition from the given <paramref name="source"/>.
            </summary>
            <param name="source">Source vertex.</param>
            <returns>Edges resulting of the apply.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2">
            <summary>
            Implementation for a graph data structure that support growth
            by transitions made by out edges of its vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="F:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2._transitionFactories">
            <summary>
            Transitions factories.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.MoveMainCacheToNotProcessedVertices">
            <summary>
            Clears the <see cref="F:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2._verticesEdgesCache"/> but keep a trace of explored vertices
            in the <see cref="F:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2._verticesNotProcessedCache"/>.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.AddTransitionFactory(QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1})">
            <summary>
            Adds a new <see cref="T:QuikGraph.Algorithms.Exploration.ITransitionFactory`2"/> to this graph.
            </summary>
            <param name="transitionFactory">Transition factory to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="transitionFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.AddTransitionFactories(System.Collections.Generic.IEnumerable{QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1}})">
            <summary>
            Adds new <see cref="T:QuikGraph.Algorithms.Exploration.ITransitionFactory`2"/>s to this graph.
            </summary>
            <param name="transitionFactories">Transition factories to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="transitionFactories"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.RemoveTransitionFactory(QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1})">
            <summary>
            Removes the given <paramref name="transitionFactory"/> from this graph.
            </summary>
            <param name="transitionFactory">Transition factory to remove.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.ClearTransitionFactories">
            <summary>
            Clears all <see cref="T:QuikGraph.Algorithms.Exploration.ITransitionFactory`2"/> from this graph.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.ContainsTransitionFactory(QuikGraph.Algorithms.Exploration.ITransitionFactory{`0,`1})">
            <summary>
            Checks if this graph contains the given <paramref name="transitionFactory"/>.
            </summary>
            <param name="transitionFactory">Transition factory to check.</param>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.SuccessorVertexPredicate">
            <summary>
            Predicate that a vertex must match to be the successor (target) of an edge.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set value is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.SuccessorEdgePredicate">
            <summary>
            Predicate that an edge must match to be the successor of a source vertex.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set value is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Exploration.TransitionFactoryImplicitGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm`2">
            <summary>
            Algorithm that separate a graph into two disjoint subsets A and B of equal (or nearly equal) in size,
            in a way that minimizes the sum of the weights of the subset of edges that cross from A to B.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="nbIterations">Number of iterations to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm`2.Partition">
            <summary>
            Partition created by the algorithm.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm`2.FindEdge(`0,`0,`1@)">
            <summary>
            Searches for an edge that links <paramref name="vertexFromA"/> and <paramref name="vertexFromB"/>.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.GraphPartition.Partition`1">
            <summary>
            Represents a graph partition in two sub sets.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.GraphPartition.Partition`1.VertexSetA">
            <summary>
            First sub set of vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.GraphPartition.Partition`1.VertexSetB">
            <summary>
            Second sub set of vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.GraphPartition.Partition`1.CutCost">
            <summary>
            Partition cut cost (to minimize).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.GraphPartition.Partition`1.#ctor(System.Collections.Generic.SortedSet{`0},System.Collections.Generic.SortedSet{`0},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.GraphPartition.Partition`1"/> class.
            </summary>
            <param name="vertexSetA">First partition vertex set.</param>
            <param name="vertexSetB">Second partition vertex set.</param>
            <param name="cutCost">Cost of the partition cut.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexSetA"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexSetB"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.GraphPartition.Partition`1.AreEquivalent(QuikGraph.Algorithms.GraphPartition.Partition{`0},QuikGraph.Algorithms.GraphPartition.Partition{`0})">
            <summary>
            Checks if both partitions are equals or equivalent.
            </summary>
            <param name="partition1">First partition.</param>
            <param name="partition2">Second partition.</param>
            <returns>True if both partitions are at least equivalent, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.GraphPartition.PartitionHelpers">
            <summary>
            Helpers to work with <see cref="T:QuikGraph.Algorithms.GraphPartition.Partition`1"/>.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.GraphPartition.PartitionHelpers.AreEquivalent``1(QuikGraph.Algorithms.GraphPartition.Partition{``0},QuikGraph.Algorithms.GraphPartition.Partition{``0})">
            <summary>
            Checks if both partitions are equals or equivalent.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="partition1">First partition.</param>
            <param name="partition2">Second partition.</param>
            <returns>True if both partitions are at least equivalent, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.IsEulerianGraphAlgorithm`2">
            <summary>
            Algorithm that checks if a graph is Eulerian.
            (has a path using all edges one and only one time).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.IsEulerianGraphAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.IsEulerianGraphAlgorithm`2"/> class.
            </summary>
            <param name="graph">Graph to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.IsEulerianGraphAlgorithm`2.CheckComponentsWithEdges">
            <summary>
            Gets the component state of the current graph.
            </summary>
            <returns><see cref="T:QuikGraph.Algorithms.ComponentWithEdges"/> state.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.IsEulerianGraphAlgorithm`2.IsEulerian">
            <summary>
            Returns true if the graph is Eulerian, otherwise false.
            </summary>
            <returns>True if the graph is Eulerian, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.IsEulerianGraphAlgorithm">
            <summary>
            Algorithm that checks if a graph is Eulerian.
            (has a path use all edges one and only one time).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.IsEulerianGraphAlgorithm.IsEulerian``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Returns true if the <paramref name="graph"/> is Eulerian, otherwise false.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to check.</param>
            <returns>True if the <paramref name="graph"/> is Eulerian, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.IsHamiltonianGraphAlgorithm`2">
            <summary>
            Algorithm that checks if a graph is Hamiltonian
            (has a path that links all vertices and pass one and only one time by each vertex).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.IsHamiltonianGraphAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.IsHamiltonianGraphAlgorithm`2"/> class.
            </summary>
            <param name="graph">Graph to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.IsHamiltonianGraphAlgorithm`2.GetPermutations">
            <summary>
            Gets vertices permutations.
            </summary>
            <returns>List of permutations.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.IsHamiltonianGraphAlgorithm`2.IsHamiltonian">
            <summary>
            Returns true if the graph is Hamiltonian, otherwise false.
            </summary>
            <returns>True if the graph is Hamiltonian, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.IsHamiltonianGraphAlgorithm">
            <summary>
            Algorithm that checks if a graph is Hamiltonian
            (has a path that links all vertices and pass one and only one time by each vertex).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.IsHamiltonianGraphAlgorithm.IsHamiltonian``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Returns true if the <paramref name="graph"/> is Hamiltonian, otherwise false.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to check.</param>
            <returns>True if the <paramref name="graph"/> is Hamiltonian, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2">
            <summary>
            Algorithm that computes a maximum bipartite matching in a graph, meaning
            the maximum number of edges not sharing any vertex.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeListGraph{`0,`1},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="sourceToVertices">Vertices to which creating augmented edge from super source.</param>
            <param name="verticesToSink">Vertices from which creating augmented edge to super sink.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceToVertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesToSink"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.SourceToVertices">
            <summary>
            Vertices to which augmented edge from super source are created with augmentation.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.VerticesToSink">
            <summary>
            Vertices from which augmented edge to super sink are created with augmentation.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.VertexFactory">
            <summary>
            Vertex factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.EdgeFactory">
            <summary>
            Edge factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.MatchedEdges">
            <summary>
            Maximal edges matching.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm`2">
            <summary>
            Algorithm that augment all vertices of a graph by adding edge between
            all vertices from super source and to super sink.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeSet{`0,`1},QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableVertexAndEdgeSet{`0,`1},QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.AllVerticesGraphAugmentorAlgorithm`2.AugmentGraph">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2">
            <summary>
            This algorithm modifies a bipartite graph into a related graph, where each vertex in
            one partition is connected to a newly added "SuperSource" and each vertex in the other
            partition is connected to a newly added "SuperSink". When the maximum flow of this
            related graph is computed, the edges used for the flow are also those which make up
            the maximum match for the bipartite graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeSet{`0,`1},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="sourceToVertices">Vertices to which creating augmented edge from super source.</param>
            <param name="verticesToSink">Vertices from which creating augmented edge to super sink.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceToVertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesToSink"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableVertexAndEdgeSet{`0,`1},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="sourceToVertices">Vertices to which creating augmented edge from super source.</param>
            <param name="verticesToSink">Vertices from which creating augmented edge to super sink.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceToVertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesToSink"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2.SourceToVertices">
            <summary>
            Vertices to which augmented edge from super source are created with augmentation.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2.VerticesToSink">
            <summary>
            Vertices from which augmented edge to super sink are created with augmentation.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.BipartiteToMaximumFlowGraphAugmentorAlgorithm`2.AugmentGraph">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2">
            <summary>
            Edmond and Karp maximum flow algorithm for directed graph with positive capacities and flows.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.EdgeFactory{`0,`1},QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacities">Function that given an edge return the capacity of this edge.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <param name="reverseEdgesAugmentorAlgorithm">Algorithm that is in of charge of augmenting the graph (creating missing reversed edges).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="capacities"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="reverseEdgesAugmentorAlgorithm"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="reverseEdgesAugmentorAlgorithm"/> targets a graph different from <paramref name="visitedGraph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.EdgeFactory{`0,`1},QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacities">Function that given an edge return the capacity of this edge.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <param name="reverseEdgesAugmentorAlgorithm">Algorithm that is in of charge augmenting the graph (creating missing reversed edges).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="capacities"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="reverseEdgesAugmentorAlgorithm"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="reverseEdgesAugmentorAlgorithm"/> targets a graph different from <paramref name="visitedGraph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2.InternalCompute">
            <summary>
            Computes the maximum flow between <see cref="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.Source"/>
            and <see cref="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.Sink"/>.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3">
            <summary>
            Base class for all graph augmentor algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,`2,QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.VertexFactory">
            <summary>
            Vertex factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.EdgeFactory">
            <summary>
            Edge factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.SuperSource">
            <summary>
            Gets the flow source vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.SuperSink">
            <summary>
            Gets the flow sink vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.Augmented">
            <summary>
            Indicates if the graph has been augmented or not.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.AugmentedEdges">
            <summary>
            Gets the collections of edges added to augment the graph.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.SuperSourceAdded">
            <summary>
            Fired when the super source vertex is added.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.SuperSinkAdded">
            <summary>
            Fired when the super sink vertex is added.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.EdgeAdded">
            <summary>
            Fired when an edge is added.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.Rollback">
            <summary>
            Rollbacks the graph augmentation.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.AugmentGraph">
            <summary>
            Augments the graph.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.AddAugmentedEdge(`0,`0)">
            <summary>
            Creates and adds an augmented edge between <paramref name="source"/> and <paramref name="target"/>.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.Dispose">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphAugmentorAlgorithmBase`3.Dispose(System.Boolean)">
            <summary>
            Called when the object is disposed or finalized.
            </summary>
            <param name="disposing">True if called when disposing, otherwise false.</param>
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2">
            <summary>
            Algorithm that computes a the graph balancing by finding vertices
            causing surplus or deficits.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.#ctor(QuikGraph.IMutableBidirectionalGraph{`0,`1},`0,`0,QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="source">Flow source vertex.</param>
            <param name="sink">Flow sink vertex.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sink"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="visitedGraph"/> does not contain <paramref name="source"/> vertex.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="visitedGraph"/> does not contain <paramref name="sink"/> vertex.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.#ctor(QuikGraph.IMutableBidirectionalGraph{`0,`1},`0,`0,QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1},System.Collections.Generic.IDictionary{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="source">Flow source vertex.</param>
            <param name="sink">Flow sink vertex.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <param name="capacities">Edges capacities.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sink"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="capacities"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="visitedGraph"/> does not contain <paramref name="source"/> vertex.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="visitedGraph"/> does not contain <paramref name="sink"/> vertex.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.VisitedGraph">
            <summary>
            Gets the graph to visit with this algorithm.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.VertexFactory">
            <summary>
            Vertex factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.EdgeFactory">
            <summary>
            Edge factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.Balanced">
            <summary>
            Indicates if the graph has been balanced or not.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.Source">
            <summary>
            Flow source vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.Sink">
            <summary>
            Flow sink vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSource">
            <summary>
            Balancing flow source vertex.
            </summary>
            <remarks>Not <see langword="null"/> if the algorithm has been run (and not reverted).</remarks>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSourceEdge">
            <summary>
            Balancing source edge (between <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSource"/> and <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.Source"/>).
            </summary>
            <remarks>Not <see langword="null"/> if the algorithm has been run (and not reverted).</remarks>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSink">
            <summary>
            Balancing flow sink vertex.
            </summary>
            <remarks>Not <see langword="null"/> if the algorithm has been run (and not reverted).</remarks>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSinkEdge">
            <summary>
            Balancing sink edge (between <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.Sink"/> and <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSink"/>).
            </summary>
            <remarks>Not <see langword="null"/> if the algorithm has been run (and not reverted).</remarks>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.SurplusVertices">
            <summary>
            Enumerable of vertices that add surplus to the graph balance.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.SurplusEdges">
            <summary>
            Enumerable of edges linked to vertices that add surplus to the graph balance.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.DeficientVertices">
            <summary>
            Enumerable of vertices that add deficit to the graph balance.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.DeficientEdges">
            <summary>
            Enumerable of edges linked to vertices that add deficit to the graph balance.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.Capacities">
            <summary>
            Edges capacities.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSourceAdded">
            <summary>
            Fired when the <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSource"/> is added to the graph.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSinkAdded">
            <summary>
            Fired when the <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.BalancingSink"/> is added to the graph.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.EdgeAdded">
            <summary>
            Fired when an edge is added to the graph.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.SurplusVertexAdded">
            <summary>
            Fired when a vertex adding surplus to the balance is found and added to <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.SurplusVertices"/>.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.DeficientVertexAdded">
            <summary>
            Fired when a vertex adding a deficit to the balance is found and added to <see cref="P:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.DeficientVertices"/>.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.GetBalancingIndex(`0)">
            <summary>
            Gets the balancing index of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get balancing index.</param>
            <returns>Balancing index.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.Balance">
            <summary>
            Runs the graph balancing algorithm.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the graph is already balanced.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.GraphBalancerAlgorithm`2.UnBalance">
            <summary>
            Runs the graph unbalancing algorithm.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the graph is not balanced.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2">
            <summary>
            Base class for all maximum flow algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacities">Function that given an edge return the capacity of this edge.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="capacities"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.Predecessors">
            <summary>
            Flow vertices predecessors.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.Capacities">
            <summary>
            Function that given an edge return the capacity of this edge.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.ResidualCapacities">
            <summary>
            Residual capacities per edge.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.EdgeFactory">
            <summary>
            Edge factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.ReversedEdges">
            <summary>
            Graph reversed edges.
            </summary>
            <remarks>Should be not <see langword="null"/> but may be empty.</remarks>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.Source">
            <summary>
            Flow source vertex.
            </summary>
            <remarks>Must not be <see langword="null"/> to run the algorithm.</remarks>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.Sink">
            <summary>
            Flow sink vertex.
            </summary>
            <remarks>Must not be <see langword="null"/> to run the algorithm.</remarks>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.MaxFlow">
            <summary>
            Maximal flow value.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2.Compute(`0,`0)">
            <summary>
            Computes the maximum flow value.
            </summary>
            <param name="source">Flow source vertex.</param>
            <param name="sink">Flow sink vertex.</param>
            <returns>Maximum flow value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sink"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Something went wrong when running the algorithm.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="source"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="sink"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm`2">
            <summary>
            Multi source and sink graph augmentor algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm`2.#ctor(QuikGraph.IMutableBidirectionalGraph{`0,`1},QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IMutableBidirectionalGraph{`0,`1},QuikGraph.VertexFactory{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.MultiSourceSinkGraphAugmentorAlgorithm`2.AugmentGraph">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2">
            <summary>
            Routines to add and remove auxiliary edges when using <see cref="T:QuikGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2"/> 
            or <see cref="M:QuikGraph.Algorithms.MaximumBipartiteMatchingAlgorithm`2.InternalCompute"/>. 
            Remember to call <see cref="M:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.RemoveReversedEdges"/> to remove auxiliary edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.#ctor(QuikGraph.IMutableVertexAndEdgeListGraph{`0,`1},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.VisitedGraph">
            <summary>
            Gets the graph to visit with this algorithm.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.EdgeFactory">
            <summary>
            Edge factory method.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.AugmentedEdges">
            <summary>
            Edges added to the initial graph (augmented ones).
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.ReversedEdges">
            <summary>
            Edges associated to their reversed edges.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.Augmented">
            <summary>
            Gets the state augmented or not of the graph (reversed edges added or not).
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.ReversedEdgeAdded">
            <summary>
            Fired when a reversed edge is added.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.FindReversedEdge(`1,`1@)">
            <summary>
            Finds the reversed edge of the given one.
            </summary>
            <param name="edge">Edge to find its corresponding reversed one.</param>
            <param name="foundReversedEdge">Found reversed edge.</param>
            <returns>True if the reversed edge was found, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.AddReversedEdges">
            <summary>
            Adds auxiliary edges to <see cref="P:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.VisitedGraph"/> to store residual flows.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the graph is already augmented.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.RemoveReversedEdges">
            <summary>
            Removes reversed edges that were added.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the graph was not augmented yet.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm`2.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.MinimumSpanningTree.IMinimumSpanningTreeAlgorithm`2">
            <summary>
            Represents a minimum spanning tree algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2">
            <summary>
            Kruskal minimum spanning tree algorithm implementation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2.TreeEdge">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MinimumSpanningTree.KruskalMinimumSpanningTreeAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2">
            <summary>
            Prim minimum spanning tree algorithm implementation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2.TreeEdge">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.MinimumSpanningTree.PrimMinimumSpanningTreeAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2">
            <summary>
            Recorder of edges predecessors.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.#ctor(System.Collections.Generic.IDictionary{`1,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2"/> class.
            </summary>
            <param name="edgesPredecessors">Edges predecessors.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgesPredecessors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.EdgesPredecessors">
            <summary>
            Edges predecessors.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.EndPathEdges">
            <summary>
            Path ending edges.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.Attach(QuikGraph.Algorithms.IEdgePredecessorRecorderAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.Path(`1)">
            <summary>
            Gets a path starting with <paramref name="startingEdge"/>.
            </summary>
            <param name="startingEdge">Starting edge.</param>
            <returns>Edge path.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="startingEdge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.AllPaths">
            <summary>
            Gets all paths.
            </summary>
            <returns>Enumerable of paths.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.MergedPath(`1,System.Collections.Generic.IDictionary{`1,QuikGraph.GraphColor})">
            <summary>
            Merges the path starting at <paramref name="startingEdge"/> with remaining edges.
            </summary>
            <param name="startingEdge">Starting edge.</param>
            <param name="colors">Edges colors mapping.</param>
            <returns>Merged path.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="startingEdge"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="colors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2.AllMergedPaths">
            <summary>
            Gets all merged path.
            </summary>
            <returns>Enumerable of merged paths.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.EdgeRecorderObserver`2">
            <summary>
            Recorder of encountered edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgeRecorderObserver`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.EdgeRecorderObserver`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgeRecorderObserver`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.EdgeRecorderObserver`2"/> class.
            </summary>
            <param name="edges">Set of edges.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.EdgeRecorderObserver`2.Edges">
            <summary>
            Encountered edges.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.EdgeRecorderObserver`2.Attach(QuikGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2">
            <summary>
            A distance recorder for <see cref="T:QuikGraph.Algorithms.IUndirectedTreeBuilderAlgorithm`2"/> algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2.#ctor(System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2"/> class.
            </summary>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2.#ctor(System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer,System.Collections.Generic.IDictionary{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2"/> class.
            </summary>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <param name="distances">Distances per vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distances"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2.DistanceRelaxer">
            <summary>
            Distance relaxer.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2.EdgeWeights">
            <summary>
            Function that computes the weight for a given edge.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2.Distances">
            <summary>
            Distances per vertex.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2.Attach(QuikGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2">
            <summary>
            Recorder of vertices predecessors (undirected).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2"/> class.
            </summary>
            <param name="verticesPredecessors">Vertices predecessors.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesPredecessors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2.VerticesPredecessors">
            <summary>
            Vertices predecessors.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2.Attach(QuikGraph.Algorithms.IUndirectedTreeBuilderAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2.TryGetPath(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the predecessor path, if reachable.
            </summary>
            <param name="vertex">Path ending vertex.</param>
            <param name="path">Path to the ending vertex.</param>
            <returns>True if a path was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2">
            <summary>
            A distance recorder for <see cref="T:QuikGraph.Algorithms.ITreeBuilderAlgorithm`2"/> algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2.#ctor(System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2"/> class.
            </summary>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2.#ctor(System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer,System.Collections.Generic.IDictionary{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2"/> class.
            </summary>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <param name="distances">Distances per vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distances"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2.DistanceRelaxer">
            <summary>
            Distance relaxer.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2.EdgeWeights">
            <summary>
            Function that computes the weight for a given edge.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2.Distances">
            <summary>
            Distances per vertex.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2.Attach(QuikGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2">
            <summary>
            Recorder of vertices predecessors paths.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2"/> class.
            </summary>
            <param name="verticesPredecessors">Vertices predecessors.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesPredecessors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2.VerticesPredecessors">
            <summary>
            Vertices predecessors.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2.EndPathVertices">
            <summary>
            Path ending vertices.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2.AllPaths">
            <summary>
            Gets all paths.
            </summary>
            <returns>Enumerable of paths.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2.Attach(QuikGraph.Algorithms.IVertexPredecessorRecorderAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2">
            <summary>
            Recorder of vertices predecessors (undirected).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2"/> class.
            </summary>
            <param name="verticesPredecessors">Vertices predecessors.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesPredecessors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2.VerticesPredecessors">
            <summary>
            Vertices predecessors.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2.Attach(QuikGraph.Algorithms.ITreeBuilderAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2.TryGetPath(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the predecessor path, if reachable.
            </summary>
            <param name="vertex">Path ending vertex.</param>
            <param name="path">Path to the ending vertex.</param>
            <returns>True if a path was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.VertexRecorderObserver`1">
            <summary>
            Recorder of encountered vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexRecorderObserver`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexRecorderObserver`1"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexRecorderObserver`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexRecorderObserver`1"/> class.
            </summary>
            <param name="vertices">Set of vertices.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexRecorderObserver`1.Vertices">
            <summary>
            Encountered vertices.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexRecorderObserver`1.Attach(QuikGraph.Algorithms.IVertexTimeStamperAlgorithm{`0})">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1">
            <summary>
            Recorder of vertices discover timestamps.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1.#ctor(System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1"/> class.
            </summary>
            <param name="discoverTimes">Vertices discover times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="discoverTimes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1.#ctor(System.Collections.Generic.IDictionary{`0,System.Int32},System.Collections.Generic.IDictionary{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1"/> class.
            </summary>
            <param name="discoverTimes">Vertices discover times.</param>
            <param name="finishTimes">Vertices fully treated times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="discoverTimes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="finishTimes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1.DiscoverTimes">
            <summary>
            Times of vertices discover.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1.FinishTimes">
            <summary>
            Times of vertices fully treated.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.VertexTimeStamperObserver`1.Attach(QuikGraph.Algorithms.IVertexTimeStamperAlgorithm{`0})">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Observers.IObserver`1">
            <summary>
            Represents an algorithm observer.
            </summary>
            <typeparam name="TAlgorithm">Algorithm type.</typeparam>
            <reference-ref id="gof02designpatterns" />
        </member>
        <member name="M:QuikGraph.Algorithms.Observers.IObserver`1.Attach(`0)">
            <summary>
            Attaches to the algorithm events and returns a <see cref="T:System.IDisposable"/>
            object that can be used to detach from the events.
            </summary>
            <param name="algorithm">Algorithm to observe.</param>
            <returns><see cref="T:System.IDisposable"/> allowing to detach from registered events.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithm"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2">
            <summary>
            Algorithm that computes the page rank of a graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.Ranks">
            <summary>
            Ranks per vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.Damping">
            <summary>
            Gets or sets the damping rate [0-1].
            </summary>
            <remarks>By default it uses 0.85 which is the value generally used.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or higher than 1.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.Tolerance">
            <summary>
            Gets or sets the error tolerance (used to stop the algorithm).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or equal 0.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.InitializeRanks">
            <summary>
            Initializes all vertices ranks (1 / VertexCount).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.GetRanksSum">
            <summary>
            Gets the sum of all ranks.
            </summary>
            <returns>Ranks sum.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.Ranking.PageRankAlgorithm`2.GetRanksMean">
            <summary>
            Gets the rank average.
            </summary>
            <returns>Rank average.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.RandomGraphFactory">
            <summary>
            Helpers related to graphs and randomness.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomGraphFactory.GetVertex``1(QuikGraph.IVertexSet{``0},System.Random)">
            <summary>
            Gets a random vertex within the given <paramref name="graph"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="graph">The graph.</param>
            <param name="rng">Random number generator.</param>
            <returns>Chosen vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rng"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomGraphFactory.GetVertex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Gets a random vertex within the given set of <paramref name="vertices"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertices">Set of vertices.</param>
            <param name="count">Number of vertices in the set.</param>
            <param name="rng">Random number generator.</param>
            <returns>Chosen vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rng"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or equal 0.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="count"/> is higher than <paramref name="vertices"/> count.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomGraphFactory.GetEdge``2(QuikGraph.IEdgeSet{``0,``1},System.Random)">
            <summary>
            Gets a random edge within the given <paramref name="graph"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph.</param>
            <param name="rng">Random number generator.</param>
            <returns>Chosen vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rng"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomGraphFactory.GetEdge``2(System.Collections.Generic.IEnumerable{``1},System.Int32,System.Random)">
            <summary>
            Gets a random edge within the given set of <paramref name="edges"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edges">Set of edges.</param>
            <param name="count">Number of edges in the set.</param>
            <param name="rng">Random number generator.</param>
            <returns>Chosen vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edges"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rng"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or equal 0.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="count"/> is higher than <paramref name="edges"/> count.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomGraphFactory.Create``2(QuikGraph.IMutableVertexAndEdgeListGraph{``0,``1},QuikGraph.VertexFactory{``0},QuikGraph.EdgeFactory{``0,``1},System.Random,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fills the given <paramref name="graph"/> with <paramref name="vertexCount"/> vertices
            and <paramref name="edgeCount"/> edges created randomly between vertices (directed graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to fill.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <param name="rng">Random number generator.</param>
            <param name="vertexCount">Number of vertices to create.</param>
            <param name="edgeCount">Number of edges to create.</param>
            <param name="selfEdges">Indicates if self edge are allowed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rng"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="vertexCount"/> is negative or equal 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="edgeCount"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomGraphFactory.Create``2(QuikGraph.IMutableUndirectedGraph{``0,``1},QuikGraph.VertexFactory{``0},QuikGraph.EdgeFactory{``0,``1},System.Random,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fills the given <paramref name="graph"/> with <paramref name="vertexCount"/> vertices
            and <paramref name="edgeCount"/> edges created randomly between vertices (undirected graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to fill.</param>
            <param name="vertexFactory">Vertex factory method.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <param name="rng">Random number generator.</param>
            <param name="vertexCount">Number of vertices to create.</param>
            <param name="edgeCount">Number of edges to create.</param>
            <param name="selfEdges">Indicates if self edge are allowed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rng"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="vertexCount"/> is negative or equal 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="edgeCount"/> is negative.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2">
            <summary>
            Wilson-Propp Cycle-Popping algorithm for Random Tree Generation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},QuikGraph.Algorithms.RandomWalks.IMarkovEdgeChain{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeChain">Edge chain strategy to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeChain"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},QuikGraph.Algorithms.RandomWalks.IMarkovEdgeChain{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeChain">Edge chain strategy to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeChain"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.EdgeChain">
            <summary>
            Edge chain strategy for the random walk.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.Rand">
            <summary>
            Gets or sets the random number generator used in <see cref="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.RandomTree"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set value is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.Successors">
            <summary>
            Map vertices associated to their edge successors.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.InitializeVertex">
            <summary>
            Fired when a vertex is initialized.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.FinishVertex">
            <summary>
            Fired when a vertex is treated and considered as in the random tree.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.TreeEdge">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.ClearTreeVertex">
            <summary>
            Fired when a vertex is removed from the random tree.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.RandomTreeWithRoot(`0)">
            <summary>
            Runs a random tree generation starting at <paramref name="root"/> vertex.
            </summary>
            <param name="root">Tree starting vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.RandomTree">
            <summary>
            Runs a random tree generation.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.IEdgeChain`2">
            <summary>
            Set of edges forming chain of edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.IEdgeChain`2.TryGetSuccessor(QuikGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <summary>
            Tries to get the successor of the given <paramref name="vertex"/> in the given <paramref name="graph"/>.
            </summary>
            <param name="graph">The graph to search in.</param>
            <param name="vertex">The vertex.</param>
            <param name="successor">Found successor, otherwise <see langword="null"/>.</param>
            <returns>True if a successor was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.IEdgeChain`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <summary>
            Tries to get the successor of the given <paramref name="vertex"/> in the given set of <paramref name="edges"/>.
            </summary>
            <param name="edges">Edge set in which searching.</param>
            <param name="vertex">The vertex.</param>
            <param name="successor">Found successor, otherwise <see langword="null"/>.</param>
            <returns>True if a successor was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edges"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.IMarkovEdgeChain`2">
            <summary>
            A Markov edges chain.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.IMarkovEdgeChain`2.Rand">
            <summary>
            Random number generator for a Markov process to do random walks.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.MarkovEdgeChainBase`2">
            <summary>
            Base class for any implementation of a Markov chain.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.MarkovEdgeChainBase`2.Rand">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.MarkovEdgeChainBase`2.TryGetSuccessor(QuikGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.MarkovEdgeChainBase`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.NormalizedMarkovEdgeChain`2">
            <summary>
            Normalized Markov chain implementation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.NormalizedMarkovEdgeChain`2.TryGetSuccessor(QuikGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.NormalizedMarkovEdgeChain`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2">
            <summary>
            Random walk algorithm (using edge chain).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.#ctor(QuikGraph.IImplicitGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.#ctor(QuikGraph.IImplicitGraph{`0,`1},QuikGraph.Algorithms.RandomWalks.IEdgeChain{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeChain">Edge chain strategy to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeChain"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.EdgeChain">
            <summary>
            Edge chain strategy for the random walk.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.EndPredicate">
            <summary>
            Predicate to prematurely ends the walk.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.StartVertex">
            <summary>
            Fired on a starting vertex once before the start of the walk from it.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.EndVertex">
            <summary>
            Fired when the walk ends.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is encountered.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.Generate(`0)">
            <summary>
            Generates a random walk with 100 steps.
            </summary>
            <param name="root">Root vertex.</param>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="root"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.RandomWalkAlgorithm`2.Generate(`0,System.Int32)">
            <summary>
            Generates a random walk with <paramref name="walkCount"/> steps.
            </summary>
            <param name="root">Root vertex.</param>
            <param name="walkCount">Number of steps for the random walk.</param>VertexNotFoundException
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="root"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.RoundRobinEdgeChain`2">
            <summary>
            Round Robin chain implementation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.RoundRobinEdgeChain`2.TryGetSuccessor(QuikGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.RoundRobinEdgeChain`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2">
            <summary>
            Markov chain with weight vanishing based on a factor.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2.#ctor(System.Collections.Generic.IDictionary{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2"/> class.
            </summary>
            <param name="edgeWeights">Map that contains edge weights.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2.#ctor(System.Collections.Generic.IDictionary{`1,System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2"/> class.
            </summary>
            <param name="edgeWeights">Map that contains edge weights.</param>
            <param name="factor">Vanishing factor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2.Factor">
            <summary>
            Vanishing factor.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2.TryGetSuccessor(QuikGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.VanishingWeightedMarkovEdgeChain`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChain`2">
            <summary>
            Markov chain with weight.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChain`2.#ctor(System.Collections.Generic.IDictionary{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2"/> class.
            </summary>
            <param name="edgeWeights">Map that contains edge weights.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChain`2.TryGetSuccessor(QuikGraph.IImplicitGraph{`0,`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChain`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2">
            <summary>
            Base class for Markov chain with weight.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2.#ctor(System.Collections.Generic.IDictionary{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2"/> class.
            </summary>
            <param name="edgeWeights">Map that contains edge weights.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2.Weights">
            <summary>
            Map of edge weights.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2.GetOutWeight(QuikGraph.IImplicitGraph{`0,`1},`0)">
            <summary>
            Gets the weight of the given <paramref name="vertex"/> out edges.
            </summary>
            <param name="graph">Graph to consider.</param>
            <param name="vertex">Vertex to get out weight.</param>
            <returns>Out weight.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2.GetWeights(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Gets the weight corresponding to all given <paramref name="edges"/>.
            </summary>
            <param name="edges">Edges to get total weight.</param>
            <returns>Edges weight.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2.TryGetSuccessor(QuikGraph.IImplicitGraph{`0,`1},`0,System.Double,`1@)">
            <summary>
            Tries to get the successor of the given <paramref name="vertex"/> in the given <paramref name="graph"/>.
            </summary>
            <param name="graph">The graph to search in.</param>
            <param name="vertex">The vertex.</param>
            <param name="position">The position.</param>
            <param name="successor">Found successor, otherwise <see langword="null"/>.</param>
            <returns>True if a successor was found, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.RandomWalks.WeightedMarkovEdgeChainBase`2.TryGetSuccessor(System.Collections.Generic.IEnumerable{`1},System.Double,`1@)">
            <summary>
            Tries to get the successor at the given <paramref name="position"/> in the given set of <paramref name="edges"/>.
            </summary>
            <param name="edges">Edge set in which searching.</param>
            <param name="position">The position.</param>
            <param name="successor">Found successor, otherwise <see langword="null"/>.</param>
            <returns>True if a successor was found, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2">
            <summary>
            Hoffman and Pavley K-shortest path algorithm.
            </summary>
            <remarks>
            Reference:
            Hoffman, W. and Pavley, R. 1959. A Method for the Solution of the Nth Best Path Problem. 
            J. ACM 6, 4 (Oct. 1959), 506-514. DOI= http://doi.acm.org/10.1145/320998.321004
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that for a given edge provide its weight.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that for a given edge provide its weight.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IBidirectionalGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that for a given edge provide its weight.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.SetTargetVertex(`0)">
            <summary>
            Sets the target vertex.
            </summary>
            <param name="target">Target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.TryGetTargetVertex(`0@)">
            <summary>
            Tries to get the target vertex if set.
            </summary>
            <param name="target">Target vertex if set, otherwise <see langword="null"/>.</param>
            <returns>True if the target vertex was set, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.Compute(`0,`0)">
            <summary>
            Runs the algorithm with the given <paramref name="root"/> vertex.
            </summary>
            <param name="root">Root vertex.</param>
            <param name="target">Target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Something went wrong when running the algorithm.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2.DeviationPath.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3">
            <summary>
            Base class for shortest path finder algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,`2,QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3.ShortestPathCount">
            <summary>
            Gets or sets the maximum number of shortest path to find.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is lower or equal to 1.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3.ComputedShortestPathCount">
            <summary>
            Gets the number of shortest path found.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3.ComputedShortestPaths">
            <summary>
            Enumerable of shortest paths found.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3.AddComputedShortestPath(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the given <paramref name="path"/> to the set of found shortest paths.
            </summary>
            <param name="path">Path to add.</param>
        </member>
        <member name="P:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3.DistanceRelaxer">
            <summary>
            Distance relaxer.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RankedShortestPath.RankedShortestPathAlgorithmBase`3.Initialize">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.RootedAlgorithmBase`2">
            <summary>
            Base class for all graph algorithm requiring a starting vertex (root).
            </summary>
            <remarks>Requires a starting vertex (root).</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RootedAlgorithmBase`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.TryGetRootVertex(`0@)">
            <summary>
            Tries to get the root vertex if set.
            </summary>
            <param name="root">Root vertex if set, otherwise <see langword="null"/>.</param>
            <returns>True if the root vertex was set, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.SetRootVertex(`0)">
            <summary>
            Sets the root vertex.
            </summary>
            <param name="root">Root vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.ClearRootVertex">
            <summary>
            Clears the root vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RootedAlgorithmBase`2.RootVertexChanged">
            <summary>
            Fired when the root vertex is changed.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.OnRootVertexChanged(System.EventArgs)">
            <summary>
            Called on each root vertex change.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.GetAndAssertRootInGraph">
            <summary>
            Gets the root vertex if set and checks it is part of the
            <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.
            </summary>
            <returns>Root vertex.</returns>
            <exception cref="T:System.InvalidOperationException">If the root vertex has not been set.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException">
            If the set root vertex is not part of the <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.AssertRootInGraph(`0)">
            <summary>
            Asserts that the given <paramref name="root"/> vertex is in the <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.
            </summary>
            <param name="root">Vertex to check.</param>
            <exception cref="T:QuikGraph.VertexNotFoundException">
            If the set root vertex is not part of the <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedAlgorithmBase`2.Compute(`0)">
            <summary>
            Runs the algorithm with the given <paramref name="root"/> vertex.
            </summary>
            <param name="root">Root vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Something went wrong when running the algorithm.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2">
            <summary>
            Base class for all graph algorithm performing a search in a graph.
            </summary>
            <remarks>Requires a starting vertex (root) and an ending vertex (target).</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.TryGetTargetVertex(`0@)">
            <summary>
            Tries to get the target vertex if set.
            </summary>
            <param name="target">Target vertex if set, otherwise <see langword="null"/>.</param>
            <returns>True if the target vertex was set, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.SetTargetVertex(`0)">
            <summary>
            Sets the target vertex.
            </summary>
            <param name="target">Target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.ClearTargetVertex">
            <summary>
            Clears the target vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.TargetVertexChanged">
            <summary>
            Fired when the target vertex is changed.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.OnTargetVertexChanged(System.EventArgs)">
            <summary>
            Called on each target vertex change.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="E:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.TargetReached">
            <summary>
            Fired when the target vertex is reached.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.OnTargetReached">
            <summary>
            Called when the target vertex is reached.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.RootedSearchAlgorithmBase`2.Compute(`0,`0)">
            <summary>
            Runs the algorithm with the given <paramref name="root"/> vertex.
            </summary>
            <param name="root">Root vertex.</param>
            <param name="target">Target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Something went wrong when running the algorithm.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2">
            <summary>
            Best first frontier search algorithm.
            </summary>
            <remarks>
            Algorithm from Frontier Search, Korkf, Zhand, Thayer, Hohwald.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2.#ctor(QuikGraph.IBidirectionalIncidenceGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that for a given edge provide its weight.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IBidirectionalIncidenceGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that for a given edge provide its weight.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BestFirstFrontierSearchAlgorithm`2.TreeEdge">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2">
            <summary>
            A depth and height first search algorithm for directed graphs.
            </summary>
            <remarks>
            This is a modified version of the classic DFS algorithm
            where the search is performed both in depth and height.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IBidirectionalGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.ProcessAllComponents">
            <summary>
            In case a root vertex has been set, indicates if the algorithm should
            walk through graph parts of other components than the root component.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from the start vertex.
            </summary>
            <remarks>
            Defaulted to <see cref="F:int.MaxValue"/>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or equal to 0.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered and under treatment.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a white vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a gray vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a black vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2">
            <summary>
            A breath first search algorithm for directed graphs.
            </summary>
            <remarks>
            This is a modified version of the classic DFS algorithm
            where the search is performed both in depth and height.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},QuikGraph.Collections.IQueue{`0},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexQueue">Queue of vertices to treat.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexQueue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},QuikGraph.Collections.IQueue{`0},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexQueue">Queue of vertices to treat.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexQueue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},QuikGraph.Collections.IQueue{`0},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor},System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexQueue">Queue of vertices to treat.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <param name="outEdgesFilter">Function that is used filter out-edges of a vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexQueue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="outEdgesFilter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.OutEdgesFilter">
            <summary>
            Filter of edges.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.ExamineVertex">
            <summary>
            Fired when a vertex is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered and under treatment.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a white vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.NonTreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a gray vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.GrayTarget">
            <summary>
            Fired when the target vertex of an out-edge from the currently treated vertex is marked as gray.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.BlackTarget">
            <summary>
            Fired when the target vertex of an out-edge from the currently treated vertex is marked as black.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2">
            <summary>
            A depth first search algorithm for directed graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor},System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <param name="outEdgesFilter">
            Delegate that takes the enumeration of out-edges and filters/reorders
            them. All vertices passed to the method should be enumerated once and only once.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="outEdgesFilter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.OutEdgesFilter">
            <summary>
            Filter of edges.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.ProcessAllComponents">
            <summary>
            In case a root vertex has been set, indicates if the algorithm should
            walk through graph parts of other components than the root component.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from the start vertex.
            </summary>
            <remarks>
            Defaulted to <see cref="F:int.MaxValue"/>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or equal to 0.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered and under treatment.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a white vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a gray vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a black vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.FinishVertex">
            <inheritdoc cref="T:QuikGraph.Algorithms.IVertexTimeStamperAlgorithm`1" />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2">
            <summary>
            A edge depth first search algorithm for directed graphs.
            </summary>
            <remarks>
            This is a variant of the classic DFS algorithm where the
            edges are color marked instead of the vertices.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IEdgeListAndIncidenceGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IEdgeListAndIncidenceGraph{`0,`1},System.Collections.Generic.IDictionary{`1,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgesColors">Edges associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IEdgeListAndIncidenceGraph{`0,`1},System.Collections.Generic.IDictionary{`1,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgesColors">Edges associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.ProcessAllComponents">
            <summary>
            In case a root vertex has been set, indicates if the algorithm should
            walk through graph parts of other components than the root component.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from the start vertex.
            </summary>
            <remarks>
            Defaulted to <see cref="F:int.MaxValue"/>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or equal to 0.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.InitializeEdge">
            <summary>
            Fired when an edge is initialized.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.StartVertex">
            <summary>
            Fired on the root vertex once before the start of the search from it.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.StartEdge">
            <summary>
            Fired when an edge starts to be treated.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.DiscoverTreeEdge">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a white edge.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a gray edge.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a black edge.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.FinishEdge">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2.EdgesColors">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2">
            <summary>
            A depth first search algorithm for implicit directed graphs.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IIncidenceGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IIncidenceGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from the start vertex.
            </summary>
            <remarks>
            Defaulted to <see cref="F:int.MaxValue"/>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or equal to 0.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.StartVertex">
            <summary>
            Fired on the root vertex once before the start of the search from it.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.DiscoverVertex">
            <summary>
            Invoked when a vertex is encountered for the first time. 
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.ExamineEdge">
            <summary>
            Invoked on every out-edge of each vertex after it is discovered. 
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Fired on each edge as it becomes a member of the edges that form
            the search tree. If you wish to record predecessors, do so at this
            event point.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Fired on the back edges in the graph.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Fired on forward or cross edges in the graph.
            (In an undirected graph this method is never called.)
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.FinishVertex">
            <summary>
            Fired on a vertex after all of its out edges have been added to
            the search tree and all of the adjacent vertices have been
            discovered (but before their out-edges have been examined).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2">
            <summary>
            An edge depth first search algorithm for implicit directed graphs.
            </summary>
            <remarks>
            This is a variant of the classic DFS where the edges are color marked.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IIncidenceGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IIncidenceGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from the start vertex.
            </summary>
            <remarks>
            Defaulted to <see cref="F:int.MaxValue"/>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or equal to 0.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.StartVertex">
            <summary>
            Fired on the root vertex once before the start of the search from it.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.StartEdge">
            <summary>
            Fired when an edge starts to be treated.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.DiscoverTreeEdge">
            <summary>
            Fired when an edge is discovered.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Invoked on each edge as it becomes a member of the edges that form
            the search tree. If you wish to record predecessors, do so at this
            event point.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Fired on the back edges in the graph. 
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Fired on forward or cross edges in the graph.
            (In an undirected graph this method is never called.)
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.FinishEdge">
            <summary>
            Fired on an edge after all of its out edges have been added to
            the search tree and all of the adjacent vertices have been
            discovered (but before their out-edges have been examined).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.EdgesColors">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2">
            <summary>
            A breath first search algorithm for undirected graphs.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},QuikGraph.Collections.IQueue{`0},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexQueue">Queue of vertices to treat.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexQueue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},QuikGraph.Collections.IQueue{`0},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="vertexQueue">Queue of vertices to treat.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexQueue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.ExamineVertex">
            <summary>
            Fired when a vertex is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered and under treatment.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a white vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.NonTreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a gray vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.GrayTarget">
            <summary>
            Fired when the target vertex of an out-edge from the currently treated vertex is marked as gray.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.BlackTarget">
            <summary>
            Fired when the target vertex of an out-edge from the currently treated vertex is marked as black.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2">
            <summary>
            A depth first search algorithm for undirected graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuikGraph.GraphColor},System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesColors">Vertices associated to their colors (treatment states).</param>
            <param name="adjacentEdgesFilter">
            Delegate that takes the enumeration of out-edges and filters/reorders
            them. All vertices passed to the method should be enumerated once and only once.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesColors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="adjacentEdgesFilter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.AdjacentEdgesFilter">
            <summary>
            Filter of adjacent edges.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.ProcessAllComponents">
            <summary>
            In case a root vertex has been set, indicates if the algorithm should
            walk through graph parts of other components than the root component.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from the start vertex.
            </summary>
            <remarks>
            Defaulted to <see cref="F:int.MaxValue"/>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative or equal to 0.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.VertexMaxDepthReached">
            <summary>
            Fired when the maximal authorized depth is reached.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered and under treatment.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a white vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a gray vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Fired when an edge is going to be treated when coming from a black vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.FinishVertex">
            <inheritdoc cref="T:QuikGraph.Algorithms.IVertexTimeStamperAlgorithm`1" />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Services.AlgorithmServices">
            <summary>
            Default algorithm services implementation.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Services.AlgorithmServices.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.Services.AlgorithmServices"/> class.
            </summary>
            <param name="host">Algorithm host.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.Services.AlgorithmServices.CancelManager">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Services.CancelManager">
            <summary>
            Default algorithm cancel manager implementation.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Services.CancelManager.CancelRequested">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Services.CancelManager.Cancel">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.Services.CancelManager.IsCancelling">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.Services.CancelManager.CancelReset">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.Services.CancelManager.ResetCancel">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.Services.IAlgorithmComponent">
            <summary>
            Represents algorithm component (services).
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Services.IAlgorithmComponent.Services">
            <summary>
            Algorithm common services.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Services.IAlgorithmComponent.GetService``1">
            <summary>
            Gets the service with given <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Service type.</typeparam>
            <returns>Found service, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.Services.IAlgorithmComponent.TryGetService``1(``0@)">
            <summary>
            Tries to get the service with given <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Service type.</typeparam>
            <param name="service">Found service.</param>
            <returns>True if the service was found, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.Services.IAlgorithmServices">
            <summary>
            Represents common services available to algorithm instances.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Services.IAlgorithmServices.CancelManager">
            <summary>
            Algorithm cancel manager.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.Services.ICancelManager">
            <summary>
            Represents an algorithm cancel manager.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Services.ICancelManager.CancelRequested">
            <summary>
            Fired when the cancel method is called.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Services.ICancelManager.Cancel">
            <summary>
            Requests the component to cancel its computation.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.Services.ICancelManager.IsCancelling">
            <summary>
            Gets a value indicating if a cancellation request is pending.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.Services.ICancelManager.CancelReset">
            <summary>
            Fired when the cancel state has been resetting.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.Services.ICancelManager.ResetCancel">
            <summary>
            Resets the cancel state.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2">
            <summary>
            A* single source shortest path algorithm for directed graph with positive distance.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double},System.Func{`0,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="costHeuristic">Function that computes a cost for a given vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="costHeuristic"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double},System.Func{`0,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="costHeuristic">Function that computes a cost for a given vertex.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="costHeuristic"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double},System.Func{`0,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="costHeuristic">Function that computes a cost for a given vertex.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="costHeuristic"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.CostHeuristic">
            <summary>
            Function that computes a cost for a given vertex.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.DiscoverVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.ExamineVertex">
            <summary>
            Fired when a vertex is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.EdgeNotRelaxed">
            <summary>
            Fired when relax of an edge does not decrease distance.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2">
            <summary>
            Bellman Ford shortest path algorithm.
            </summary>
            <remarks>
            <para>
            The Bellman-Ford algorithm solves the single-source shortest paths
            problem for a graph with both positive and negative edge weights.
            </para>
            <para>
            If you only need to solve the shortest paths problem for positive
            edge weights, Dijkstra's algorithm provides a more efficient
            alternative.
            </para>
            <para>
            If all the edge weights are all equal to one then breadth-first search
            provides an even more efficient alternative.
            </para>
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.FoundNegativeCycle">
            <summary>
            Indicates if a negative cycle was found in the graph.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.InitializeVertex">
            <summary>
            Fired on each vertex in the graph before the start of the algorithm.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.ExamineEdge">
            <summary>
            Fired on every edge in the graph (|V| times).
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeNotRelaxed">
            <summary>
            Fired if the distance label for a target vertex is not decreased.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeMinimized">
            <summary>
            Fired during the second stage of the algorithm,
            during the test of whether each edge was minimized.
            If the edge is minimized then this event is raised.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeNotMinimized">
            <summary>
            Fired during the second stage of the algorithm,
            during the test of whether each edge was minimized.
            If the edge was not minimized, this event is raised.
            This happens when there is a negative cycle in the graph.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.InternalCompute">
            <summary>
            Applies the Bellman Ford algorithm.
            </summary>
            <remarks>
            Does not initialize the predecessor and distance map.
            </remarks>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.Clean">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2">
            <summary>
            A single source shortest path algorithm for directed acyclic graphs.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.DiscoverVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.ExamineVertex">
            <summary>
            Fired when a vertex is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.EdgeNotRelaxed">
            <summary>
            Fired when relax of an edge does not decrease distance.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2">
            <summary>
            Dijkstra single source shortest path algorithm for directed graph
            with positive distance.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.DiscoverVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.ExamineVertex">
            <summary>
            Fired when a vertex is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.EdgeNotRelaxed">
            <summary>
            Fired when relax of an edge does not decrease distance.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2">
            <summary>
            Floyd-Warshall all shortest path algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexAndEdgeListGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.TryGetDistance(`0,`0,System.Double@)">
            <summary>
            Tries to get the distance (<paramref name="distance"/>) between
            <paramref name="source"/> and <paramref name="target"/>.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="distance">Associated distance (cost).</param>
            <returns>True if the distance was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.TryGetPath(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the path that links both <paramref name="source"/>
            and <paramref name="target"/> vertices.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="path">The found path, otherwise <see langword="null"/>.</param>
            <returns>True if a path linking both vertices was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Failed to find a predecessor vertex while getting path.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2.Dump(System.IO.TextWriter)">
            <summary>
            Dumps current data state to stream <paramref name="writer"/>.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3">
            <summary>
            Base class for all shortest path finder algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="F:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3._distances">
            <summary>
            Vertices distances.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,`2,System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,`2,System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.Distances">
            <summary>
            Vertices distances.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.GetVertexDistance(`0)">
            <summary>
            Gets the distance associated to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex to get the distance for.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.SetVertexDistance(`0,System.Double)">
            <summary>
            Sets the distance associated to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex to get the distance for.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.TryGetDistance(`0,System.Double@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Algorithm has not been run.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.GetDistance(`0)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Algorithm has not been run.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.GetDistances">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.DistancesIndexGetter">
            <summary>
            Gets the function that gives access to distances from a vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.Weights">
            <summary>
            Function that given an edge return the weight of this edge.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.DistanceRelaxer">
            <summary>
            Distance relaxer.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.Initialize">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.TreeEdge">
            <summary>
            Fired when the distance label for the target vertex is decreased.
            The edge that participated in the last relaxation for vertex v is
            an edge in the shortest paths tree.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.OnTreeEdge(`1)">
            <summary>
            Called on each <see cref="E:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.TreeEdge"/> event.
            </summary>
            <param name="edge">Concerned edge.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.Relax(`1)">
            <summary>
            Runs the relaxation algorithm on the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to relax.</param>
            <returns>True if relaxation decreased the target vertex distance, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2">
            <summary>
            A single source shortest path algorithm for undirected graph
            with positive distances.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.InitializeVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.StartVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.DiscoverVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.ExamineVertex">
            <summary>
            Fired when a vertex is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.ExamineEdge">
            <summary>
            Fired when an edge is going to be analyzed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.EdgeNotRelaxed">
            <summary>
            Fired when relax of an edge does not decrease distance.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2">
            <summary>
            Base class for all shortest path finder algorithms in undirected graphs.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="F:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2._distances">
            <summary>
            Vertices distances.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IUndirectedGraph{`0,`1},System.Func{`1,System.Double},QuikGraph.Algorithms.IDistanceRelaxer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="distanceRelaxer">Distance relaxer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceRelaxer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.Distances">
            <summary>
            Vertices distances.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.GetVertexDistance(`0)">
            <summary>
            Gets the distance associated to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex to get the distance for.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.SetVertexDistance(`0,System.Double)">
            <summary>
            Sets the distance associated to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex to get the distance for.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.TryGetDistance(`0,System.Double@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Algorithm has not been run.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.GetDistance(`0)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Algorithm has not been run.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.GetDistances">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.DistancesIndexGetter">
            <summary>
            Gets the function that gives access to distances from a vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.Weights">
            <summary>
            Function that given an edge return the weight of this edge.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.DistanceRelaxer">
            <summary>
            Distance relaxer.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.Initialize">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.VerticesColors">
            <summary>
            Stores vertices associated to their colors (treatment state).
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.GetVertexColor(`0)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.TreeEdge">
            <summary>
            Fired when the distance label for the target vertex is decreased.
            The edge that participated in the last relaxation for vertex v is
            an edge in the shortest paths tree.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.OnTreeEdge(`1,System.Boolean)">
            <summary>
            Called on each <see cref="E:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.TreeEdge"/> event.
            </summary>
            <param name="edge">Concerned edge.</param>
            <param name="reversed">Indicates if the edge is reversed.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.Relax(`1,`0,`0)">
            <summary>
            Runs the relaxation algorithm on the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to relax.</param>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <returns>True if relaxation decreased the target vertex distance, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1">
            <summary>
            A single-source K-shortest loopless paths algorithm for graphs
            with non negative edge cost.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="T:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath">
            <summary>
            Class representing a sorted path.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath.#ctor(System.Collections.Generic.IEnumerable{QuikGraph.EquatableTaggedEdge{`0,System.Double}})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath"/> struct.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath.Count">
            <summary>
            Number of edges in this path.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath.Equals(QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm{`0}.SortedPath)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.SortedPath.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.#ctor(QuikGraph.AdjacencyGraph{`0,QuikGraph.EquatableTaggedEdge{`0,System.Double}},`0,`0,System.Int32,System.Func{QuikGraph.EquatableTaggedEdge{`0,System.Double},System.Double},System.Func{System.Collections.Generic.IEnumerable{QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm{`0}.SortedPath},System.Collections.Generic.IEnumerable{QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm{`0}.SortedPath}})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1"/> class.
            </summary>
            <remarks>
            <see cref="T:System.Double"/> for tag type (edge) which comes from Dijkstra’s algorithm, which is used to get one shortest path.
            </remarks>
            <param name="graph">Graph to visit.</param>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="k">Maximum number of path to search.</param>
            <param name="edgeWeights">Optional function that computes the weight for a given edge.</param>
            <param name="filter">Optional filter of found paths.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> is not part of <paramref name="graph"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is not part of <paramref name="graph"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="k"/> is lower than 1.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.ShortestPath.YenShortestPathsAlgorithm`1.Execute">
            <summary>
            Runs the algorithm.
            </summary>
            <returns>Found paths.</returns>
            <exception cref="T:QuikGraph.NoPathFoundException">No shortest path was found.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2">
            <summary>
            Offline least common ancestor in a rooted tree.
            </summary>
            <remarks>
            Reference:
            Gabow, H. N. and Tarjan, R. E. 1983. A linear-time algorithm for a special case 
            of disjoint set union. In Proceedings of the Fifteenth Annual ACM Symposium 
            on theory of Computing STOC '83. ACM, New York, NY, 246-251. 
            DOI= http://doi.acm.org/10.1145/800061.808753 
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.Ancestors">
            <summary>
            Ancestors of vertices pairs.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.#ctor(QuikGraph.Algorithms.Services.IAlgorithmComponent,QuikGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2"/> class.
            </summary>
            <param name="host">Host to use if set, otherwise use this reference.</param>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.TryGetVertexPairs(System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{`0}}@)">
            <summary>
            Tries to get vertices pairs if set.
            </summary>
            <param name="pairs">Vertices pairs if set.</param>
            <returns>True if vertex pairs were set, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.SetVertexPairs(System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{`0}})">
            <summary>
            Sets vertices pairs.
            </summary>
            <param name="pairs">Vertices pairs.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pairs"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pairs"/> is empty or any vertex from pairs is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2.Compute(`0,System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{`0}})">
            <summary>
            Runs the algorithm with the given <paramref name="root"/> vertex and set of vertices pairs.
            </summary>
            <param name="root">Root vertex.</param>
            <param name="pairs">Vertices pairs.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pairs"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pairs"/> is empty or any vertex from pairs is not part of <see cref="P:QuikGraph.Algorithms.AlgorithmBase`1.VisitedGraph"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2">
            <summary>
            Topological sort algorithm (can be performed on an acyclic bidirectional graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacity">Sorted vertices capacity.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1},QuikGraph.Algorithms.TopologicalSort.TopologicalSortDirection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="direction">Sort direction.</param>
            <param name="capacity">Sorted vertices capacity.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2.SortedVertices">
            <summary>
            Sorted vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2.InDegrees">
            <summary>
            Vertices in-degrees.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2.VertexAdded">
            <summary>
            Fired when a vertex is added to the set of sorted vertices.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.SourceFirstBidirectionalTopologicalSortAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2">
            <summary>
            Topological sort algorithm (can be performed on an acyclic graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacity">Sorted vertices capacity.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2.SortedVertices">
            <summary>
            Sorted vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2.InDegrees">
            <summary>
            Vertices in-degrees.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2.VertexAdded">
            <summary>
            Fired when a vertex is added to the set of sorted vertices.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.SourceFirstTopologicalSortAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2">
            <summary>
            Topological sort algorithm (can be performed on an acyclic graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2.#ctor(QuikGraph.IVertexListGraph{`0,`1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacity">Sorted vertices capacity.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2.SortedVertices">
            <summary>
            Sorted vertices.
            </summary>
            <remarks>It is <see langword="null"/> if the algorithm has not been run yet.</remarks>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2.DiscoverVertex">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.Algorithms.TopologicalSort.TopologicalSortAlgorithm`2.FinishVertex">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.TopologicalSort.TopologicalSortDirection">
            <summary>
            Enumeration of possible topological sort directions.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.TopologicalSort.TopologicalSortDirection.Forward">
            <summary>
            Forward sort.
            </summary>
        </member>
        <member name="F:QuikGraph.Algorithms.TopologicalSort.TopologicalSortDirection.Backward">
            <summary>
            Backward sort.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2">
            <summary>
            Undirected topological sort algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacity">Sorted vertices capacity.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2.SortedVertices">
            <summary>
            Sorted vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2.Degrees">
            <summary>
            Vertices degrees.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2.AllowCyclicGraph">
            <summary>
            Gets or sets the flag that indicates if cyclic graph are supported or not.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2.VertexAdded">
            <summary>
            Fired when a vertex is added to the set of sorted vertices.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.UndirectedFirstTopologicalSortAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2">
            <summary>
            Undirected topological sort algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="capacity">Sorted vertices capacity.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2.SortedVertices">
            <summary>
            Sorted vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2.AllowCyclicGraph">
            <summary>
            Gets or sets the flag that indicates if cyclic graph are supported or not.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TopologicalSort.UndirectedTopologicalSortAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.TransitiveAlgorithmHelper`2">
            <summary>
            Helper for transitive algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TransitiveAlgorithmHelper`2.InternalCompute(System.Action{QuikGraph.BidirectionalGraph{`0,`1},`0,`0,System.Boolean,`1})">
            <summary>
            Runs through the graph and calls <paramref name="action"/>
            for each couple of indirect ancestor vertex of a given vertex.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.TransitiveClosureAlgorithm`2">
            <summary>
            Algorithm that computes the transitive closure of a graph, which is another directed graph
            with the same vertices and every reachable vertices by a given one linked by a single edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TransitiveClosureAlgorithm`2.#ctor(QuikGraph.IEdgeListGraph{`0,`1},System.Func{`0,`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TransitiveClosureAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeFactory">Function that create an edge between the 2 given vertices.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.TransitiveClosureAlgorithm`2.TransitiveClosure">
            <summary>
            Transitive closure graph.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TransitiveClosureAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.TransitiveReductionAlgorithm`2">
            <summary>
            Algorithm that computes the transitive reduction of a graph, which is another directed graph
            with the same vertices and as few edges as possible.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.TransitiveReductionAlgorithm`2.#ctor(QuikGraph.IEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TransitiveReductionAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.TransitiveReductionAlgorithm`2.TransitiveReduction">
            <summary>
            Transitive reduction graph.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TransitiveReductionAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.Task`2.IsResultReady">
            <summary>
            Checks if the result is ready to be used.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TaskPriority.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TaskPriority.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TaskPriority.CompareTo(QuikGraph.Algorithms.TSP.TaskPriority)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TasksManager`2.AddTask(QuikGraph.Algorithms.TSP.Task{`0,`1})">
            <summary>
            Adds the given <paramref name="task"/> into the <see cref="T:QuikGraph.Algorithms.TSP.TasksManager`2"/>.
            </summary>
            <param name="task">Task to add.</param>
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TasksManager`2.GetTask">
            <summary>
            Gets and removes the task with minimal priority.
            </summary>
            <returns>The <see cref="T:QuikGraph.Algorithms.TSP.Task`2"/>.</returns>
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TasksManager`2.HasTasks">
            <summary>
            Checks if there are pending tasks.
            </summary>
            <returns>True if there are pending tasks, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.TSP.TSP`3">
            <summary>
            Algorithm to answer the TSP (Travelling Salesman Problem), meaning finding a path that best link
            every vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.TSP.TSP`3.ResultPath">
            <summary>
            Shortest path found, otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.TSP.TSP`3.BestCost">
            <summary>
            Best cost found to answer the problem.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TSP`3.#ctor(`2,System.Func{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.TSP.TSP`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TSP`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.TSP.TSP`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.VertexColoring.VertexColoringAlgorithm`2">
            <summary>
            Algorithm that walk through a graph and color vertices with the minimum number of colors possible.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.VertexColoring.VertexColoringAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.VertexColoring.VertexColoringAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.VertexColoring.VertexColoringAlgorithm`2.Colors">
            <summary>
            Vertices colors.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.VertexColoring.VertexColoringAlgorithm`2.VertexColored">
            <summary>
            Fired when a vertex is colored.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.VertexColoring.VertexColoringAlgorithm`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Algorithms.VertexColoring.VertexColoringAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.VertexCover.MinimumVertexCoverApproximationAlgorithm`2">
            <summary>
            A minimum vertices cover approximation algorithm for undirected graphs.
            </summary>
            <remarks>
            This is a modified version (by Batov Nikita) of the original
            Mihalis Yannakakis and Fanica Gavril algorithm.
            </remarks>
        </member>
        <member name="M:QuikGraph.Algorithms.VertexCover.MinimumVertexCoverApproximationAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.VertexCover.MinimumVertexCoverApproximationAlgorithm`2"/> class.
            </summary>
            <remarks>This constructor will use <see cref="T:QuikGraph.Utils.CryptoRandom"/> ad random number generator.</remarks>
            <param name="graph">Graph to compute the cover.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.VertexCover.MinimumVertexCoverApproximationAlgorithm`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1},System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Algorithms.VertexCover.MinimumVertexCoverApproximationAlgorithm`2"/> class.
            </summary>
            <param name="graph">Graph to compute the cover.</param>
            <param name="rng">Random number generator.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rng"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Algorithms.VertexCover.MinimumVertexCoverApproximationAlgorithm`2.CoverSet">
            <summary>
            Set of covering vertices.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.VertexCover.MinimumVertexCoverApproximationAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Algorithms.AlgorithmEventHandler`1">
            <summary>
            Delegate to react to an algorithm event.
            </summary>
            <param name="sender">Algorithm that sent the event.</param>
            <param name="args">Event arguments.</param>
            <typeparam name="TGraph"></typeparam>
        </member>
        <member name="T:QuikGraph.Algorithms.AlgorithmExtensions">
            <summary>
            Extensions related to algorithms, to run them.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.GetIndexer``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns the method that implement the access indexer.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="dictionary">Dictionary on which getting the key access method.</param>
            <returns>A function allowing key indexed access.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.GetVertexIdentity``1(QuikGraph.IVertexSet{``0})">
            <summary>
            Gets the vertex identity.
            </summary>
            <remarks>
            Returns more efficient methods for primitive types,
            otherwise builds a dictionary.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="graph">The graph.</param>
            <returns>A function that computes a vertex identity for the given <paramref name="graph"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.GetEdgeIdentity``2(QuikGraph.IEdgeSet{``0,``1})">
            <summary>
            Gets the edge identity.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph.</param>
            <returns>A function that computes an edge identity for the given <paramref name="graph"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.TreeBreadthFirstSearch``2(QuikGraph.IVertexListGraph{``0,``1},``0)">
            <summary>
            Computes a breadth first tree and gets a function that allow to get edges
            connected to a vertex in a directed graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="root">Starting vertex.</param>
            <returns>A function that allow to get edges connected to a given vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.TreeDepthFirstSearch``2(QuikGraph.IVertexListGraph{``0,``1},``0)">
            <summary>
            Computes a depth first tree and gets a function that allow to get edges
            connected to a vertex in a directed graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="root">Starting vertex.</param>
            <returns>A function that allow to get edges connected to a given vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.TreeCyclePoppingRandom``2(QuikGraph.IVertexListGraph{``0,``1},``0)">
            <summary>
            Computes a cycle popping tree and gets a function that allow to get edges
            connected to a vertex in a directed graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2"/> algorithm and
            <see cref="T:QuikGraph.Algorithms.RandomWalks.NormalizedMarkovEdgeChain`2"/>.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="root">Starting vertex.</param>
            <returns>A function that allow to get edges connected to a given vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.TreeCyclePoppingRandom``2(QuikGraph.IVertexListGraph{``0,``1},``0,QuikGraph.Algorithms.RandomWalks.IMarkovEdgeChain{``0,``1})">
            <summary>
            Computes a cycle popping tree and gets a function that allow to get edges
            connected to a vertex in a directed graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="root">Starting vertex.</param>
            <param name="edgeChain">Markov edge chain.</param>
            <returns>A function that allow to get edges connected to a given vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeChain"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Something went wrong when running the algorithm.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ShortestPathsDijkstra``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0)">
            <summary>
            Computes shortest path with the Dijkstra algorithm and gets a function that allows
            to get paths in a directed graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="root">Starting vertex.</param>
            <returns>A function that allow to get paths starting from <paramref name="root"/> vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ShortestPathsDijkstra``2(QuikGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double},``0)">
            <summary>
            Computes shortest path with the Dijkstra algorithm and gets a function that allows
            to get paths in an undirected graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="root">Starting vertex.</param>
            <returns>A function that allow to get paths starting from <paramref name="root"/> vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ShortestPathsAStar``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},System.Func{``0,System.Double},``0)">
            <summary>
            Computes shortest path with the A* algorithm and gets a function that allows
            to get paths in a directed graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="costHeuristic">Function that computes a cost for a given vertex.</param>
            <param name="root">Starting vertex.</param>
            <returns>A function that allow to get paths starting from <paramref name="root"/> vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="costHeuristic"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ShortestPathsBellmanFord``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0,System.Boolean@)">
            <summary>
            Computes shortest path with the Bellman Ford algorithm and gets a function that allows
            to get paths in a directed graph.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="root">Starting vertex.</param>
            <param name="hasNegativeCycle">Indicates if a negative cycle has been found or not.</param>
            <returns>A function that allow to get paths starting from <paramref name="root"/> vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ShortestPathsDag``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0)">
            <summary>
            Computes shortest path with an algorithm made for DAG (Directed ACyclic graph) and gets a function
            that allows to get paths.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="root">Starting vertex.</param>
            <returns>A function that allow to get paths starting from <paramref name="root"/> vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.RankedShortestPathHoffmanPavley``2(QuikGraph.IBidirectionalGraph{``0,``1},System.Func{``1,System.Double},``0,``0,System.Int32)">
            <summary>
            Computes k-shortest path with the Hoffman Pavley algorithm and gets those paths.
            </summary>
            <remarks>Uses <see cref="T:QuikGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2"/> algorithm.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <param name="root">Starting vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="maxCount">Maximal number of path to search.</param>
            <returns>Enumeration of paths to go from <paramref name="root"/> vertex to <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="root"/> or <paramref name="target"/> are not part of <paramref name="graph"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxCount"/> is lower or equal to 1.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.Sinks``2(QuikGraph.IVertexListGraph{``0,``1})">
            <summary>
            Gets set of sink vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Sink vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.Roots``2(QuikGraph.IVertexListGraph{``0,``1})">
            <summary>
            Gets set of root vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Root vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.Roots``2(QuikGraph.IBidirectionalGraph{``0,``1})">
            <summary>
            Gets set of root vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Root vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.IsolatedVertices``2(QuikGraph.IBidirectionalGraph{``0,``1})">
            <summary>
            Gets set of isolated vertices (no incoming nor outcoming vertices).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Root vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.TopologicalSort``2(QuikGraph.IVertexListGraph{``0,``1})">
            <summary>
            Creates a topological sort of a directed acyclic graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Sorted vertices (topological sort).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.NonAcyclicGraphException">If the input graph has a cycle.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.TopologicalSort``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Creates a topological sort of an undirected acyclic graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Sorted vertices (topological sort).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.NonAcyclicGraphException">If the input graph has a cycle.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.SourceFirstTopologicalSort``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Creates a topological sort (source first) of a directed acyclic graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Sorted vertices (topological sort).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.NonAcyclicGraphException">If the input graph has a cycle.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.SourceFirstTopologicalSort``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Creates a topological sort (source first) of an undirected acyclic graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Sorted vertices (topological sort).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.NonAcyclicGraphException">If the input graph has a cycle.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.SourceFirstBidirectionalTopologicalSort``2(QuikGraph.IBidirectionalGraph{``0,``1})">
            <summary>
            Creates a topological sort (source first) of a bidirectional directed acyclic graph.
            Uses the <see cref="F:QuikGraph.Algorithms.TopologicalSort.TopologicalSortDirection.Forward"/> direction.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Sorted vertices (topological sort).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.NonAcyclicGraphException">If the input graph has a cycle.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.SourceFirstBidirectionalTopologicalSort``2(QuikGraph.IBidirectionalGraph{``0,``1},QuikGraph.Algorithms.TopologicalSort.TopologicalSortDirection)">
            <summary>
            Creates a topological sort (source first) of a bidirectional directed acyclic graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="direction">Topological sort direction.</param>
            <returns>Sorted vertices (topological sort).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.NonAcyclicGraphException">If the input graph has a cycle.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ConnectedComponents``2(QuikGraph.IUndirectedGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            Computes the connected components of an undirected graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="components">Found components.</param>
            <returns>Number of component found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.IncrementalConnectedComponents``2(QuikGraph.IMutableVertexAndEdgeSet{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.IDictionary{``0,System.Int32}}}@)">
            <summary>
            Computes the incremental connected components for a growing graph (edge added only).
            Each call to the delegate re-computes the component dictionary. The returned dictionary
            is shared across multiple calls of the method.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="getComponents">A function retrieve components of the <paramref name="graph"/>.</param>
            <returns>A <see cref="T:System.IDisposable"/> of the used algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.StronglyConnectedComponents``2(QuikGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            Computes the strongly connected components of a directed graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="components">Found components.</param>
            <returns>Number of component found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.WeaklyConnectedComponents``2(QuikGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            Computes the weakly connected components of a directed graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="components">Found components.</param>
            <returns>Number of component found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="components"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.CondensateStronglyConnected``3(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Condensates the strongly connected components of a directed graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>The condensed graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.CondensateWeaklyConnected``3(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Condensates the weakly connected components of a directed graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>The condensed graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.CondensateEdges``2(QuikGraph.IBidirectionalGraph{``0,``1},QuikGraph.VertexPredicate{``0})">
            <summary>
            Condensates the given bidirectional directed graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="vertexPredicate">Vertex predicate used to filter the vertices to put in the condensed graph.</param>
            <returns>The condensed graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.OddVertices``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Gets odd vertices of the given <paramref name="graph"/>.
            </summary>
            <param name="graph">Graph to visit.</param>
            <returns>Enumerable of odd vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.IsDirectedAcyclicGraph``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the graph is acyclic or not.
            </summary>
            <remarks>
            Builds an <see cref="T:QuikGraph.AdjacencyGraph`2"/> from <paramref name="edges"/>
            and performs a depth first search to look for cycles.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edges">Edges of forming the graph to visit.</param>
            <returns>True if the graph contains a cycle, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.IsDirectedAcyclicGraph``2(QuikGraph.IVertexListGraph{``0,``1})">
            <summary>
            Checks whether the <paramref name="graph"/> is acyclic or not.
            </summary>
            <remarks>
            Performs a depth first search to look for cycles.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>True if the graph contains a cycle, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.IsUndirectedAcyclicGraph``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the graph is acyclic or not.
            </summary>
            <remarks>
            Builds an <see cref="T:QuikGraph.UndirectedGraph`2"/> from <paramref name="edges"/>
            and performs a depth first search to look for cycles.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edges">Edges of forming the graph to visit.</param>
            <returns>True if the graph contains a cycle, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.IsUndirectedAcyclicGraph``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Checks whether the <paramref name="graph"/> is acyclic or not.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>True if the graph contains a cycle, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ComputePredecessorCost``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``1,System.Double},``0)">
            <summary>
            Given a edge cost map, computes the corresponding predecessor costs.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="predecessors">Predecessors map.</param>
            <param name="edgeCosts">Costs map.</param>
            <param name="target">Target vertex.</param>
            <returns>The predecessors cost.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predecessors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeCosts"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ComputeDisjointSet``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Computes disjoint sets of the given <paramref name="graph"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>Found disjoint sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.MinimumSpanningTreePrim``2(QuikGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double})">
            <summary>
            Computes the minimum spanning tree using Prim algorithm.
            </summary>
            <remarks>Prim algorithm is simply implemented by calling Dijkstra shortest path.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <returns>Edges part of the minimum spanning tree.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.MinimumSpanningTreeKruskal``2(QuikGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double})">
            <summary>
            Computes the minimum spanning tree using Kruskal algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="edgeWeights">Function that computes the weight for a given edge.</param>
            <returns>Edges part of the minimum spanning tree.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeWeights"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.OfflineLeastCommonAncestor``2(QuikGraph.IVertexListGraph{``0,``1},``0,System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{``0}})">
            <summary>
            Computes the offline least common ancestor between pairs of vertices in a
            rooted tree using Tarjan algorithm.
            </summary>
            <remarks>
            Reference:
            Gabow, H. N. and Tarjan, R. E. 1983. A linear-time algorithm for a special case of disjoint set union.
            In Proceedings of the Fifteenth Annual ACM Symposium on theory of Computing STOC '83. ACM, New York, NY, 246-251.
            DOI= http://doi.acm.org/10.1145/800061.808753 
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="root">Starting vertex.</param>
            <param name="pairs">Vertices pairs.</param>
            <returns>A function that allow to get least common ancestor for a pair of vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pairs"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">At least one of <paramref name="pairs"/> vertices is not part of <paramref name="graph"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.MaximumFlow``2(QuikGraph.IMutableVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0,``0,QuikGraph.TryFunc{``0,``1}@,QuikGraph.EdgeFactory{``0,``1},QuikGraph.Algorithms.MaximumFlow.ReversedEdgeAugmentorAlgorithm{``0,``1})">
            <summary>
            Computes the maximum flow for a graph with positive capacities and flows
            using Edmonds-Karp algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <param name="edgeCapacities">Function that given an edge return the capacity of this edge.</param>
            <param name="source">The source vertex.</param>
            <param name="sink">The sink vertex.</param>
            <param name="flowPredecessors">Function that allow to retrieve flow predecessors.</param>
            <param name="edgeFactory">Edge factory method.</param>
            <param name="reversedEdgeAugmentorAlgorithm">Algorithm that is in of charge of augmenting the graph (creating missing reversed edges).</param>
            <returns>The maximum flow.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeCapacities"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sink"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="reversedEdgeAugmentorAlgorithm"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> and <paramref name="sink"/> are the same vertex.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ComputeTransitiveReduction``2(QuikGraph.IEdgeListGraph{``0,``1})">
            <summary>
            Computes the transitive reduction of the given <paramref name="graph"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to compute the reduction.</param>
            <returns>Transitive graph reduction.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.ComputeTransitiveClosure``2(QuikGraph.IEdgeListGraph{``0,``1},System.Func{``0,``0,``1})">
            <summary>
            Computes the transitive close of the given <paramref name="graph"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to compute the closure.</param>
            <param name="edgeFactory">Function that create an edge between the 2 given vertices.</param>
            <returns>Transitive graph closure.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.AlgorithmExtensions.Clone``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``0,``0},System.Func{``1,``0,``0,``1},QuikGraph.IMutableVertexAndEdgeSet{``0,``1})">
            <summary>
            Clones a graph to another graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to clone.</param>
            <param name="vertexCloner">Delegate to clone a vertex.</param>
            <param name="edgeCloner">Delegate to clone an edge.</param>
            <param name="clone">Cloned graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexCloner"/> is <see langword="null"/> or creates <see langword="null"/> vertex.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeCloner"/> is <see langword="null"/> or creates <see langword="null"/> edge.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="clone"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.IAlgorithm`1">
            <summary>
            Represents an algorithm to run on a graph.
            </summary>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.IAlgorithm`1.VisitedGraph">
            <summary>
            Gets the graph to visit with this algorithm.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IComputation">
            <summary>
            Represents a computation of something with control states.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.IComputation.SyncRoot">
            <summary>
            Synchronizer object.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.IComputation.State">
            <summary>
            Current computation state.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.IComputation.Compute">
            <summary>
            Runs the computation.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.IComputation.Abort">
            <summary>
            Abort the computation.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IComputation.StateChanged">
            <summary>
            Fired when the computation state changed.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IComputation.Started">
            <summary>
            Fired when the computation start.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IComputation.Finished">
            <summary>
            Fired when the computation is finished.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IComputation.Aborted">
            <summary>
            Fired when the computation is aborted.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IConnectedComponentAlgorithm`3">
            <summary>
            Represents an algorithm dealing with graph connected components.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.IConnectedComponentAlgorithm`3.ComponentCount">
            <summary>
            Number of components.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.IConnectedComponentAlgorithm`3.Components">
            <summary>
            Graph components.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IDistanceRecorderAlgorithm`1">
            <summary>
            An algorithm that exposes events to compute a distance map between vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="E:QuikGraph.Algorithms.IDistanceRecorderAlgorithm`1.InitializeVertex">
            <summary>
            Fired when a vertex is initialized.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IDistanceRecorderAlgorithm`1.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IDistanceRelaxer">
            <summary>
            Represents a distance relaxer.
            </summary>
        </member>
        <member name="P:QuikGraph.Algorithms.IDistanceRelaxer.InitialDistance">
            <summary>
            Initial distance.
            </summary>
        </member>
        <member name="M:QuikGraph.Algorithms.IDistanceRelaxer.Combine(System.Double,System.Double)">
            <summary>
            Combines the distance and the weight in a single value.
            </summary>
            <param name="distance">Distance value.</param>
            <param name="weight">Weight value.</param>
            <returns>The combined value.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.IDistancesCollection`1">
            <summary>
            Represents an object that stores information about distances between vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.IDistancesCollection`1.TryGetDistance(`0,System.Double@)">
            <summary>
            Tries to get the distance associated to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="distance">Associated distance.</param>
            <returns>True if the distance was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.IDistancesCollection`1.GetDistance(`0)">
            <summary>
            Gets the distance associated to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex to get the distance for.</param>
            <returns>The distance associated with the vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> has no recorded distance.</exception>
        </member>
        <member name="M:QuikGraph.Algorithms.IDistancesCollection`1.GetDistances">
            <summary>
            Gets the distances for all vertices currently known.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.KeyValuePair{Vertex,Distance}"/> for the known vertices.</returns>
        </member>
        <member name="T:QuikGraph.Algorithms.IEdgeColorizerAlgorithm`2">
            <summary>
            Represents a storage of edges colorization state.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.Algorithms.IEdgeColorizerAlgorithm`2.EdgesColors">
            <summary>
            Treated edges with their colors (colorized edges).
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IEdgePredecessorRecorderAlgorithm`2">
            <summary>
            An algorithm that exposes events to compute edges predecessors.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="E:QuikGraph.Algorithms.IEdgePredecessorRecorderAlgorithm`2.DiscoverTreeEdge">
            <summary>
            Fired when an edge is discovered.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IEdgePredecessorRecorderAlgorithm`2.FinishEdge">
            <summary>
            Fired when an edge is fully treated.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.ITreeBuilderAlgorithm`2">
            <summary>
            An algorithm that exposes an event to build an edge tree.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="E:QuikGraph.Algorithms.ITreeBuilderAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is encountered.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IUndirectedTreeBuilderAlgorithm`2">
            <summary>
            An algorithm that exposes an event to build an edge tree (in undirected graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="E:QuikGraph.Algorithms.IUndirectedTreeBuilderAlgorithm`2.TreeEdge">
            <summary>
            Fired when an edge is encountered.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IUndirectedVertexPredecessorRecorderAlgorithm`2">
            <summary>
            An algorithm that exposes events to compute vertices predecessors (in undirected graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="E:QuikGraph.Algorithms.IUndirectedVertexPredecessorRecorderAlgorithm`2.StartVertex">
            <summary>
            Fired on a starting vertex once before the start of the search from it.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IUndirectedVertexPredecessorRecorderAlgorithm`2.FinishVertex">
            <summary>
            Fired when a vertex is fully treated.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IVertexColorizerAlgorithm`1">
            <summary>
            Represents an algorithm that puts colors on vertices and allow to get that color.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.Algorithms.IVertexColorizerAlgorithm`1.GetVertexColor(`0)">
            <summary>
            Gets the <see cref="T:QuikGraph.GraphColor"/> associated to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>The vertex <see cref="T:QuikGraph.GraphColor"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> has no associated color.</exception>
        </member>
        <member name="T:QuikGraph.Algorithms.IVertexPredecessorRecorderAlgorithm`2">
            <summary>
            An algorithm that exposes events to compute vertices predecessors (in directed graph).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="E:QuikGraph.Algorithms.IVertexPredecessorRecorderAlgorithm`2.StartVertex">
            <summary>
            Fired on a starting vertex once before the start of the search from it.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IVertexPredecessorRecorderAlgorithm`2.FinishVertex">
            <summary>
            Fired when a vertex is fully treated.
            </summary>
        </member>
        <member name="T:QuikGraph.Algorithms.IVertexTimeStamperAlgorithm`1">
            <summary>
            An algorithm that exposes events to compute timing with vertices treatment.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="E:QuikGraph.Algorithms.IVertexTimeStamperAlgorithm`1.DiscoverVertex">
            <summary>
            Fired when a vertex is discovered.
            </summary>
        </member>
        <member name="E:QuikGraph.Algorithms.IVertexTimeStamperAlgorithm`1.FinishVertex">
            <summary>
            Fired when a vertex is fully treated.
            </summary>
        </member>
        <member name="T:QuikGraph.GraphColor">
            <summary>
            Colors used in vertex coloring algorithms.
            </summary>
        </member>
        <member name="F:QuikGraph.GraphColor.White">
            <summary>
            Usually initial color.
            </summary>
        </member>
        <member name="F:QuikGraph.GraphColor.Gray">
            <summary>
            Usually intermediate color.
            </summary>
        </member>
        <member name="F:QuikGraph.GraphColor.Black">
            <summary>
            Usually finished color.
            </summary>
        </member>
        <member name="T:QuikGraph.Collections.BinaryHeap`2">
            <summary>
            Binary heap.
            </summary>
            <remarks>
            Indexing rules:
            
            parent index: (index - 1)/2
            left child: 2 * index + 1
            right child: 2 * index + 2
            
            Reference:
            http://dotnetslackers.com/Community/files/folders/data-structures-and-algorithms/entry28722.aspx
            </remarks>
            <typeparam name="TValue">Value type.</typeparam>
            <typeparam name="TPriority">Priority metric type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.BinaryHeap`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.BinaryHeap`2"/> class.
            </summary>
            <param name="capacity">Heap capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.BinaryHeap`2"/> class.
            </summary>
            <param name="priorityComparison">Priority comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="priorityComparison"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.#ctor(System.Int32,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.BinaryHeap`2"/> class.
            </summary>
            <param name="capacity">Heap capacity.</param>
            <param name="priorityComparison">Priority comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="priorityComparison"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="P:QuikGraph.Collections.BinaryHeap`2.PriorityComparison">
            <summary>
            Priority comparer.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.BinaryHeap`2.Capacity">
            <summary>
            Heap capacity.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.BinaryHeap`2.Count">
            <summary>
            Number of element.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.Add(`0,`1)">
            <summary>
            Adds the given <paramref name="value"/> (with priority) into the heap.
            </summary>
            <param name="priority">Item priority.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.Minimum">
            <summary>
            Gets the minimum pair.
            </summary>
            <returns>The minimal pair.</returns>
            <exception cref="T:System.InvalidOperationException">The heap is empty.</exception>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.RemoveMinimum">
            <summary>
            Gets and removes the minimal pair.
            </summary>
            <returns>The minimal pair.</returns>
            <exception cref="T:System.InvalidOperationException">The heap is empty.</exception>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.IndexOf(`1)">
            <summary>
            Gets the index of the given <paramref name="value"/> in the heap.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of the value if found, otherwise -1.</returns>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.Update(`0,`1)">
            <summary>
            Updates the priority of the given <paramref name="value"/> (or add it if not present).
            </summary>
            <param name="priority">The priority.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.MinimumUpdate(`0,`1)">
            <summary>
            Updates the priority of the given <paramref name="value"/> if the new priority is lower
            than the current <paramref name="value"/> priority (or add it if not present).
            </summary>
            <param name="priority">The priority.</param>
            <param name="value">The value.</param>
            <returns>True if the heap was updated, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.ToArray">
            <summary>
            Gets all heap values.
            </summary>
            <returns>Array of heap values.</returns>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.ToPairsArray">
            <summary>
            Gets all values with their priorities.
            </summary>
            <returns>Array of heap priorities and values.</returns>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.IsConsistent">
            <summary>
            Checks if this heap is consistent (fulfill indexing rule).
            </summary>
            <returns>True if the heap is consistent, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.ToString2">
            <summary>
            Gets a string representation of this heap.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:QuikGraph.Collections.BinaryHeap`2.ToStringTree">
            <summary>
            Gets a string tree representation of this heap.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="T:QuikGraph.Collections.BinaryQueue`2">
            <summary>
            Priority queue to sort vertices by distance priority (use <see cref="T:QuikGraph.Collections.BinaryHeap`2"/>).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TDistance">Distance type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.BinaryQueue`2"/> class.
            </summary>
            <param name="distanceFunc">Function that compute the distance for a given vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceFunc"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.#ctor(System.Func{`0,`1},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.BinaryQueue`2"/> class.
            </summary>
            <param name="distanceFunc">Function that compute the distance for a given vertex.</param>
            <param name="distanceComparison">Comparer of distances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceFunc"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceComparison"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Collections.BinaryQueue`2.Count">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.Enqueue(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.Dequeue">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.Peek">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.ToArray">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.Update(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.ToPairsArray">
            <summary>
            Converts this queue to an array of vertices associated to their distances.
            </summary>
            <returns>Array composed of elements.</returns>
        </member>
        <member name="M:QuikGraph.Collections.BinaryQueue`2.ToString2">
            <summary>
            Gets an alternative string representation.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="T:QuikGraph.Collections.EdgeEdgeDictionary`2">
            <summary>
            Stores association of vertices to edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.EdgeEdgeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.EdgeEdgeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.EdgeEdgeDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.EdgeEdgeDictionary`2"/> class.
            </summary>
            <param name="capacity">Dictionary capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Collections.EdgeEdgeDictionary`2.Clone">
            <summary>
            Clones this vertices/edges dictionary.
            </summary>
            <returns>Cloned dictionary.</returns>
        </member>
        <member name="M:QuikGraph.Collections.EdgeEdgeDictionary`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Collections.EdgeList`2">
            <summary>
            Stores a list of edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.EdgeList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.EdgeList`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.EdgeList`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.EdgeList`2"/> class.
            </summary>
            <param name="capacity">List capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Collections.EdgeList`2.#ctor(QuikGraph.Collections.EdgeList{`0,`1})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.EdgeList`2.Clone">
            <summary>
            Clones this edge list.
            </summary>
            <returns>Cloned list.</returns>
        </member>
        <member name="M:QuikGraph.Collections.EdgeList`2.QuikGraph#Collections#IEdgeList{TVertex,TEdge}#Clone">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.EdgeList`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Collections.FibonacciHeap`2">
            <summary>
            Heap following Fibonacci rules.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <typeparam name="TPriority">Priority metric type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.FibonacciHeap`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.#ctor(QuikGraph.Collections.HeapDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.FibonacciHeap`2"/> class.
            </summary>
            <param name="direction">Heap direction.</param>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.#ctor(QuikGraph.Collections.HeapDirection,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.FibonacciHeap`2"/> class.
            </summary>
            <param name="direction">Heap direction.</param>
            <param name="priorityComparison">Priority comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="priorityComparison"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeap`2.PriorityComparison">
            <summary>
            Priority comparer.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeap`2.Direction">
            <summary>
            Heap direction.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeap`2.IsEmpty">
            <summary>
            Checks if the heap is empty.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeap`2.Count">
            <summary>
            Number of element.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeap`2.Top">
            <summary>
            Top element of the heap.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.Enqueue(`0,`1)">
            <summary>
            Enqueues an element in the heap.
            </summary>
            <param name="priority">Value priority.</param>
            <param name="value">Value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="priority"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.ChangeKey(QuikGraph.Collections.FibonacciHeapCell{`0,`1},`0)">
            <summary>
            Changes the priority of the given <paramref name="cell"/>.
            </summary>
            <param name="cell">Cell to update the priority.</param>
            <param name="newPriority">New priority.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cell"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="newPriority"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.UpdateCellsDegree(QuikGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Updates the degree of a cell, cascading to update the degree of the
            parents if necessary.
            </summary>
            <param name="cell">Cell to update.</param>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.Delete(QuikGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Deletes the given <paramref name="cell"/> from this heap.
            </summary>
            <param name="cell">Cell to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cell"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.Dequeue">
            <summary>
            Dequeues an element from the heap.
            </summary>
            <returns>Removed element.</returns>
            <exception cref="T:System.InvalidOperationException">The heap is empty.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.UpdateNext">
            <summary>
            Updates the Next pointer, maintaining the heap
            by folding duplicate heap degrees into each other.
            Takes O(log(N)) time amortized.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.ReduceCells(QuikGraph.Collections.FibonacciHeapCell{`0,`1},QuikGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Given two cells, adds the child cell as a child of the parent cell.
            </summary>
            <param name="parentCell">Parent cell.</param>
            <param name="childCell">Child cell.</param>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.Merge(QuikGraph.Collections.FibonacciHeap{`0,`1})">
            <summary>
            Merges the given <paramref name="heap"/> into this heap.
            </summary>
            <param name="heap">Heap to merge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="heap"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="heap"/> is not in the same direction as this heap.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.GetDestructiveEnumerator">
            <summary>
            Enumerator for this heap that <see cref="M:QuikGraph.Collections.FibonacciHeap`2.Dequeue"/> elements in the same time.
            </summary>
            <returns>Heap elements.</returns>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeap`2.DrawHeap">
            <summary>
            Draws the current heap in a string. Marked cells have an * next to them.
            </summary>
            <returns>Heap string representation.</returns>
        </member>
        <member name="T:QuikGraph.Collections.FibonacciHeapCell`2">
            <summary>
            Represents a cell that stores a value with its priority.
            </summary>
            <typeparam name="TPriority">Priority type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Marked">
            <summary>
            Determines if a node has had a child cut from it before.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Degree">
            <summary>
            Determines the depth of a node.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Priority">
            <summary>
            Gets or sets the value priority.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Removed">
            <summary>
            Gets or sets the state removed of a cell.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Parent">
            <summary>
            Parent cell.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Children">
            <summary>
            Children cells.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Previous">
            <summary>
            Previous cell.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapCell`2.Next">
            <summary>
            Next cell.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeapCell`2.ToKeyValuePair">
            <summary>
            Converts this cell to a <see cref="T:System.Collections.Generic.KeyValuePair{TPriority,TValue}"/>.
            </summary>
            <returns>A corresponding <see cref="T:System.Collections.Generic.KeyValuePair{TPriority,TValue}"/>.</returns>
        </member>
        <member name="T:QuikGraph.Collections.FibonacciHeapLinkedList`2">
            <summary>
            Represents a list of <see cref="T:QuikGraph.Collections.FibonacciHeapCell`2"/>.
            </summary>
            <typeparam name="TPriority">Priority type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciHeapLinkedList`2.First">
            <summary>
            First <see cref="T:QuikGraph.Collections.FibonacciHeapCell`2"/>.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeapLinkedList`2.MergeLists(QuikGraph.Collections.FibonacciHeapLinkedList{`0,`1})">
            <summary>
            Merges the given <paramref name="cells"/> at the end of this cells list.
            </summary>
            <param name="cells">Cells to merge.</param>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeapLinkedList`2.AddLast(QuikGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Adds the given <paramref name="cell"/> at the end of this cells list.
            </summary>
            <param name="cell">Cell to add.</param>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeapLinkedList`2.Remove(QuikGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Removes the given <paramref name="cell"/> from this cells list.
            </summary>
            <param name="cell">Cell to remove.</param>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeapLinkedList`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciHeapLinkedList`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Collections.FibonacciQueue`2">
            <summary>
            Priority queue to sort vertices by distance priority (use <see cref="T:QuikGraph.Collections.FibonacciHeap`2"/>).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TDistance">Distance type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.BinaryQueue`2"/> class.
            </summary>
            <param name="distanceFunc">Function that compute the distance for a given vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceFunc"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.FibonacciQueue`2"/> class.
            </summary>
            <param name="capacity">Initial capacity.</param>
            <param name="values">Set of vertices (<see langword="null"/> if <paramref name="capacity"/> is 0).</param>
            <param name="distanceFunc">Function that compute the distance for a given vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceFunc"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Func{`0,`1},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.FibonacciQueue`2"/> class.
            </summary>
            <param name="capacity">Initial capacity.</param>
            <param name="values">Set of vertices (<see langword="null"/> if <paramref name="capacity"/> is 0).</param>
            <param name="distanceFunc">Function that compute the distance for a given vertex.</param>
            <param name="distanceComparison">Comparer of distances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceFunc"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceComparison"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.FibonacciQueue`2"/> class.
            </summary>
            <param name="values">Dictionary of vertices associates to their distance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.#ctor(System.Collections.Generic.Dictionary{`0,`1},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.FibonacciQueue`2"/> class.
            </summary>
            <param name="values">Dictionary of vertices associates to their distance.</param>
            <param name="distanceComparison">Comparer of distances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="distanceComparison"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Collections.FibonacciQueue`2.Count">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.Enqueue(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.Dequeue">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.Peek">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.ToArray">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.FibonacciQueue`2.Update(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Collections.ForestDisjointSet`1">
            <summary>
            Disjoint-set implementation with path compression and union-by-rank optimizations.
            </summary>
            <typeparam name="T">Element type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.ForestDisjointSet`1"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.ForestDisjointSet`1"/> class.
            </summary>
            <param name="capacity">Element capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative or <see cref="F:int.MaxValue"/>.</exception>
        </member>
        <member name="P:QuikGraph.Collections.ForestDisjointSet`1.SetCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Collections.ForestDisjointSet`1.ElementCount">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.MakeSet(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.FindSet(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.AreInSameSet(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.Union(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.ForestDisjointSet`1.Find(QuikGraph.Collections.ForestDisjointSet{`0}.Element)">
            <summary>
            Finds the root parent element, and applies path compression.
            </summary>
            <param name="element">Element to search parent.</param>
            <returns>Root parent element.</returns>
        </member>
        <member name="T:QuikGraph.Collections.HeapDirection">
            <summary>
            Specifies the order in which a Heap will Dequeue items.
            </summary>
        </member>
        <member name="F:QuikGraph.Collections.HeapDirection.Increasing">
            <summary>
            Items are Dequeued in Increasing order from least to greatest.
            </summary>
        </member>
        <member name="F:QuikGraph.Collections.HeapDirection.Decreasing">
            <summary>
            Items are Dequeued in Decreasing order, from greatest to least.
            </summary>
        </member>
        <member name="T:QuikGraph.Collections.Queue`1">
            <inheritdoc cref="T:QuikGraph.Collections.IQueue`1" />
        </member>
        <member name="T:QuikGraph.Collections.SoftHeap`2">
            <summary>
            Soft heap, which aims to has a constant amortized time for
            creation of heap, inserting an element merging two heaps,
            deleting an element and finding the element with minimum key.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.SoftHeap`2.#ctor(System.Double,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.SoftHeap`2"/> class.
            </summary>
            <param name="maximumErrorRate">Indicates the maximum error rate to respect.</param>
            <param name="keyMaxValue">Gives the maximum key value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyMaxValue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumErrorRate"/> is not in range ]0, 0.5].</exception>
        </member>
        <member name="M:QuikGraph.Collections.SoftHeap`2.#ctor(System.Double,`0,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.SoftHeap`2"/> class.
            </summary>
            <param name="maximumErrorRate">Indicates the maximum error rate to respect.</param>
            <param name="keyMaxValue">Gives the maximum key value.</param>
            <param name="comparison">Key comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyMaxValue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumErrorRate"/> is not in range ]0, 0.5].</exception>
        </member>
        <member name="P:QuikGraph.Collections.SoftHeap`2.MinRank">
            <summary>
            Minimal rank (based on <see cref="P:QuikGraph.Collections.SoftHeap`2.ErrorRate"/>).
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.SoftHeap`2.KeyComparison">
            <summary>
            Key comparer.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.SoftHeap`2.KeyMaxValue">
            <summary>
            Maximal authorized key.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.SoftHeap`2.ErrorRate">
            <summary>
            Error rate.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.SoftHeap`2.Count">
            <summary>
            Number of element.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.SoftHeap`2.Add(`0,`1)">
            <summary>
            Adds the given <paramref name="value"/> with the given <paramref name="key"/> into the heap.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is superior to <see cref="P:QuikGraph.Collections.SoftHeap`2.KeyMaxValue"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.SoftHeap`2.RemoveMinimum">
            <summary>
            Gets and removes the minimal pair.
            </summary>
            <returns>The minimal pair.</returns>
            <exception cref="T:System.InvalidOperationException">The heap is empty.</exception>
        </member>
        <member name="M:QuikGraph.Collections.SoftHeap`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.SoftHeap`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Collections.VertexEdgeDictionary`2">
            <summary>
            Stores associations of vertices to their edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.VertexEdgeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.VertexEdgeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.VertexEdgeDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.VertexEdgeDictionary`2"/> class.
            </summary>
            <param name="capacity">Dictionary capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Collections.VertexEdgeDictionary`2.Clone">
            <summary>
            Clones this vertex/edges dictionary.
            </summary>
            <returns>Cloned dictionary.</returns>
        </member>
        <member name="M:QuikGraph.Collections.VertexEdgeDictionary`2.QuikGraph#Collections#IVertexEdgeDictionary{TVertex,TEdge}#Clone">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Collections.VertexEdgeDictionary`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Collections.VertexList`1">
            <summary>
            Stores a list of vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.VertexList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.VertexList`1"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.VertexList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Collections.VertexList`1"/> class.
            </summary>
            <param name="capacity">List capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.Collections.VertexList`1.#ctor(QuikGraph.Collections.VertexList{`0})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.VertexList`1.Clone">
            <summary>
            Clones this vertex list.
            </summary>
            <returns>Cloned list.</returns>
        </member>
        <member name="M:QuikGraph.Collections.VertexList`1.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Collections.IDisjointSet`1">
            <summary>
            A disjoint-set data structure.
            </summary>
            <typeparam name="T">Element type.</typeparam>
        </member>
        <member name="P:QuikGraph.Collections.IDisjointSet`1.SetCount">
            <summary>
            Gets the current number of sets.
            </summary>
        </member>
        <member name="P:QuikGraph.Collections.IDisjointSet`1.ElementCount">
            <summary>
            Gets the current number of elements.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.IDisjointSet`1.MakeSet(`0)">
            <summary>
            Creates a new set for the <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.IDisjointSet`1.FindSet(`0)">
            <summary>
            Finds the set containing the <paramref name="value"/>.
            </summary>
            <param name="value">Value to search.</param>
            <returns>Root value of the set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.IDisjointSet`1.AreInSameSet(`0,`0)">
            <summary>
            Gets a value indicating if left and right are contained in the same set.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>True if both values are in the same set, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.IDisjointSet`1.Union(`0,`0)">
            <summary>
            Merges the sets from the two values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> were unioned,
            false if they already belong to the same set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Collections.IDisjointSet`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the value is in the data structure.
            </summary>
            <param name="value">The value.</param>
            <returns>True if the value is already in the set, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Collections.IEdgeList`2">
            <summary>
            Represents a cloneable list of edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.IEdgeList`2.TrimExcess">
            <summary>
            Trims excess allocated space.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.IEdgeList`2.Clone">
            <summary>
            Gets a clone of this list.
            </summary>
            <returns>Cloned list.</returns>
        </member>
        <member name="T:QuikGraph.Collections.IPriorityQueue`1">
            <summary>
            Represents a queue with priority.
            </summary>
            <typeparam name="T">Element type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.IPriorityQueue`1.Update(`0)">
            <summary>
            Updates the given <paramref name="value"/> priority.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:QuikGraph.Collections.IQueue`1">
            <summary>
            Represents a queue (First in, First out).
            </summary>
            <typeparam name="T">Element type.</typeparam>
        </member>
        <member name="P:QuikGraph.Collections.IQueue`1.Count">
            <summary>
            Number of elements.
            </summary>
        </member>
        <member name="M:QuikGraph.Collections.IQueue`1.Contains(`0)">
            <summary>
            Checks if this queue contains the given <paramref name="value"/>.
            </summary>
            <param name="value">Value to check.</param>
            <returns>True if the <paramref name="value"/> is contained in the queue, false otherwise.</returns>
        </member>
        <member name="M:QuikGraph.Collections.IQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an element in the queue.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:QuikGraph.Collections.IQueue`1.Dequeue">
            <summary>
            Dequeues an element from the queue.
            </summary>
            <returns>Removed element.</returns>
            <exception cref="T:System.InvalidOperationException">Queue is empty.</exception>
        </member>
        <member name="M:QuikGraph.Collections.IQueue`1.Peek">
            <summary>
            Returns the element at the beginning of the queue.
            </summary>
            <returns>The top queue element.</returns>
            <exception cref="T:System.InvalidOperationException">Queue is empty.</exception>
        </member>
        <member name="M:QuikGraph.Collections.IQueue`1.ToArray">
            <summary>
            Converts this queue to an array.
            </summary>
            <returns>Array composed of elements.</returns>
        </member>
        <member name="T:QuikGraph.Collections.IVertexEdgeDictionary`2">
            <summary>
            A cloneable dictionary of vertices associated to their edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Collections.IVertexEdgeDictionary`2.Clone">
            <summary>
            Gets a clone of the dictionary. The vertices and edges are not cloned.
            </summary>
            <returns>Cloned dictionary.</returns>
        </member>
        <member name="T:QuikGraph.Constants.EdgeConstants">
            <summary>
            Constants related to edges.
            </summary>
        </member>
        <member name="F:QuikGraph.Constants.EdgeConstants.EdgeFormatString">
            <summary>
            Edge string formatting.
            </summary>
        </member>
        <member name="F:QuikGraph.Constants.EdgeConstants.EdgeTerminalFormatString">
            <summary>
            Edge terminals string formatting.
            </summary>
        </member>
        <member name="F:QuikGraph.Constants.EdgeConstants.TaggedEdgeFormatString">
            <summary>
            Edge string formatting (with tag).
            </summary>
        </member>
        <member name="F:QuikGraph.Constants.EdgeConstants.UndirectedEdgeFormatString">
            <summary>
            Undirected edge string formatting.
            </summary>
        </member>
        <member name="F:QuikGraph.Constants.EdgeConstants.TaggedUndirectedEdgeFormatString">
            <summary>
            Undirected edge string formatting (with tag).
            </summary>
        </member>
        <member name="T:QuikGraph.CreateEdge`2">
            <summary>
            Delegate to create an edge in a graph between two vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph in with adding the edge.</param>
            <param name="source">Edge source vertex.</param>
            <param name="target">Edge target vertex.</param>
            <returns>The created edge.</returns>
        </member>
        <member name="T:QuikGraph.EdgeAction`2">
            <summary>
            Delegate to perform an action involving the <paramref name="edge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edge">Edge to treat.</param>
        </member>
        <member name="T:QuikGraph.EdgeEdgeAction`2">
            <summary>
            Delegate to perform an action involving the 2 edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edge">First edge.</param>
            <param name="targetEdge">Second edge.</param>
        </member>
        <member name="T:QuikGraph.EdgeEqualityComparer`1">
            <summary>
            Delegate to compare edge source and target vertex with given ones.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edge">Edge to compare.</param>
            <param name="source">Source vertex to compare with.</param>
            <param name="target">Target vertex to compare with.</param>
            <returns>True if the <paramref name="edge"/> vertices matches given ones, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.EdgeEventHandler`2">
            <summary>
            Delegate for an handler dealing with a edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:QuikGraph.EdgeFactory`2">
            <summary>
            Delegate to create an edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="source">Edge source vertex.</param>
            <param name="target">Edge target vertex.</param>
            <returns>The created edge.</returns>
        </member>
        <member name="T:QuikGraph.EdgeIdentity`2">
            <summary>
            Delegate to compute the identity of the given <paramref name="edge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edge">Edge to compute identity.</param>
            <returns>The <paramref name="edge"/> identity.</returns>
        </member>
        <member name="T:QuikGraph.EdgePredicate`2">
            <summary>
            Delegate to perform a check on the given <paramref name="edge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edge">Edge to check condition.</param>
            <returns>True if the <paramref name="edge"/> matches the predicate, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.IdentifiableEdgeFactory`2">
            <summary>
            Delegate to create an identifiable edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="source">Edge source vertex.</param>
            <param name="target">Edge target vertex.</param>
            <param name="id">Edge id.</param>
            <returns>The created vertex.</returns>
        </member>
        <member name="T:QuikGraph.UndirectedEdgeAction`2">
            <summary>
            Delegate for an handler dealing with an undirected edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:QuikGraph.TryFunc`2">
            <summary>
            Delegate that has one parameter and returns an out value of the type specified by the <typeparamref name="TResult"/> parameter.
            This method can fail so the boolean return type indicate the state succeeded or not of the method.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method if it succeed.</param>
            <returns>Boolean indicating if the method succeeded or not.</returns>
        </member>
        <member name="T:QuikGraph.TryFunc`3">
            <summary>
            Delegate that has 2 parameters and returns an out value of the type specified by the <typeparamref name="TResult"/> parameter.
            This method can fail so the boolean return type indicate the state succeeded or not of the method.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method if it succeed.</param>
            <returns>Boolean indicating if the method succeeded or not.</returns>
        </member>
        <member name="T:QuikGraph.TryFunc`4">
            <summary>
            Delegate that has 3 parameters and returns an out value of the type specified by the <typeparamref name="TResult"/> parameter.
            This method can fail so the boolean return type indicate the state succeeded or not of the method.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method if it succeed.</param>
            <returns>Boolean indicating if the method succeeded or not.</returns>
        </member>
        <member name="T:QuikGraph.TryFunc`5">
            <summary>
            Delegate that has 4 parameters and returns an out value of the type specified by the <typeparamref name="TResult"/> parameter.
            This method can fail so the boolean return type indicate the state succeeded or not of the method.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method if it succeed.</param>
            <returns>Boolean indicating if the method succeeded or not.</returns>
        </member>
        <member name="T:QuikGraph.CreateVertexDelegate`2">
            <summary>
            Delegate to create a vertex in a graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph in with adding the vertex.</param>
            <returns>The created vertex.</returns>
        </member>
        <member name="T:QuikGraph.IdentifiableVertexFactory`1">
            <summary>
            Delegate to create an identifiable vertex.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="id">Vertex id.</param>
            <returns>The created vertex.</returns>
        </member>
        <member name="T:QuikGraph.VertexAction`1">
            <summary>
            Delegate to perform an action involving the <paramref name="vertex"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertex">Vertex to treat.</param>
        </member>
        <member name="T:QuikGraph.VertexEventHandler`1">
            <summary>
            Delegate to for an handler dealing with a vertex.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:QuikGraph.VertexFactory`1">
            <summary>
            Delegate to create a vertex.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <returns>The created vertex.</returns>
        </member>
        <member name="T:QuikGraph.VertexIdentity`1">
            <summary>
            Delegate to compute the identity of the given <paramref name="vertex"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertex">Vertex to compute identity.</param>
            <returns>The <paramref name="vertex"/> identity.</returns>
        </member>
        <member name="T:QuikGraph.VertexPredicate`1">
            <summary>
            Delegate to perform a check on the given <paramref name="vertex"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertex">Vertex to check condition.</param>
            <returns>True if the <paramref name="vertex"/> matches the predicate, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.EdgeEventArgs`2">
            <summary>
            Base class for arguments of an event related to an edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.EdgeEventArgs`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EdgeEventArgs`2"/> class.
            </summary>
            <param name="edge">Concerned edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.EdgeEventArgs`2.Edge">
            <summary>
            Edge concerned by the event.
            </summary>
        </member>
        <member name="T:QuikGraph.UndirectedEdgeEventArgs`2">
            <summary>
            Base class for arguments of an event related to an undirected edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.UndirectedEdgeEventArgs`2.#ctor(`1,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.UndirectedEdgeEventArgs`2"/> class.
            </summary>
            <param name="edge">The edge.</param>
            <param name="reversed">Indicates if the edge should be reversed or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.UndirectedEdgeEventArgs`2.Reversed">
            <summary>
            Indicates if the edge vertices are reversed or not.
            </summary>
        </member>
        <member name="P:QuikGraph.UndirectedEdgeEventArgs`2.Source">
            <summary>
            Edge source.
            </summary>
        </member>
        <member name="P:QuikGraph.UndirectedEdgeEventArgs`2.Target">
            <summary>
            Edge target.
            </summary>
        </member>
        <member name="T:QuikGraph.VertexEventArgs`1">
            <summary>
            Base class for arguments of an event related to a vertex.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.VertexEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.VertexEventArgs`1"/> class.
            </summary>
            <param name="vertex">Concerned vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.VertexEventArgs`1.Vertex">
            <summary>
            Vertex concerned by the event.
            </summary>
        </member>
        <member name="T:QuikGraph.NegativeCapacityException">
            <summary>
            Exception raised when an algorithm find a negative capacity in a graph.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeCapacityException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NegativeCapacityException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeCapacityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NegativeCapacityException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeCapacityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.NegativeCycleGraphException">
            <summary>
            Exception raised when an algorithm detected a negative cycle in a graph.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeCycleGraphException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NegativeCycleGraphException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeCycleGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NegativeCycleGraphException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeCycleGraphException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.NegativeWeightException">
            <summary>
            Exception raised when an algorithm find or computed a negative weight in a graph.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeWeightException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NegativeWeightException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeWeightException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NegativeWeightException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NegativeWeightException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.NonAcyclicGraphException">
            <summary>
            Exception raised when an algorithm detected a cyclic graph when required acyclic.
            </summary>
        </member>
        <member name="M:QuikGraph.NonAcyclicGraphException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NonAcyclicGraphException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NonAcyclicGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NonAcyclicGraphException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NonAcyclicGraphException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.NonStronglyConnectedGraphException">
            <summary>
            Exception raised when an algorithm detected a non-strongly connected graph.
            </summary>
        </member>
        <member name="M:QuikGraph.NonStronglyConnectedGraphException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NonStronglyConnectedGraphException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NonStronglyConnectedGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NonStronglyConnectedGraphException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NonStronglyConnectedGraphException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.NoPathFoundException">
            <summary>
            Exception raised when an algorithm could not find a path in a graph.
            </summary>
        </member>
        <member name="M:QuikGraph.NoPathFoundException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NoPathFoundException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NoPathFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.NoPathFoundException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.NoPathFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.ParallelEdgeNotAllowedException">
            <summary>
            Exception raised when an algorithm detected a parallel edge that is not allowed.
            </summary>
        </member>
        <member name="M:QuikGraph.ParallelEdgeNotAllowedException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.ParallelEdgeNotAllowedException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.ParallelEdgeNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.ParallelEdgeNotAllowedException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.ParallelEdgeNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.QuikGraphException">
            <summary>
            QuikGraph base exception.
            </summary>
        </member>
        <member name="M:QuikGraph.QuikGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.QuikGraphException"/> with the given message.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:QuikGraph.QuikGraphException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.VertexNotFoundException">
            <summary>
            Exception raised when trying to use a vertex that is not inside the manipulated graph.
            </summary>
        </member>
        <member name="M:QuikGraph.VertexNotFoundException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.VertexNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.VertexNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:QuikGraph.VertexNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.VertexNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="T:QuikGraph.EdgeExtensions">
            <summary>
            Extensions related to graph edges.
            </summary>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.IsSelfEdge``1(QuikGraph.IEdge{``0})">
            <summary>
            Gets a value indicating if the edge is a self edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edge">Edge to check.</param>
            <returns>True if edge is a self one, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.GetOtherVertex``1(QuikGraph.IEdge{``0},``0)">
            <summary>
            Given a <paramref name="vertex"/>, returns the other vertex in the edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edge">The edge.</param>
            <param name="vertex">The source or target vertex of the <paramref name="edge"/>.</param>
            <returns>The other edge vertex.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.IsAdjacent``1(QuikGraph.IEdge{``0},``0)">
            <summary>
            Gets a value indicating if the <paramref name="vertex"/> is adjacent to the
            <paramref name="edge"/> (is the source or target).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edge">The edge.</param>
            <param name="vertex">Source or target <paramref name="edge"/> vertex.</param>
            <returns>True if the <paramref name="vertex"/> is adjacent to this <paramref name="edge"/>, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.IsPath``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks if this sequence of edges makes a path.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="path">Sequence of edges.</param>
            <returns>True if the set makes a complete path, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.HasCycles``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks if this sequence of edges makes a cycle.
            </summary>
            <remarks>Note that this function only work when given a path.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="path">Sequence of edges that forms a path.</param>
            <returns>True if the set makes a cycle, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.IsPathWithoutCycles``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks if this path of edges does not make a cycle.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="path">Path of edges.</param>
            <returns>True if the path makes a cycle, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.ToVertexPair``1(QuikGraph.IEdge{``0})">
            <summary>
            Creates a vertex pair (source, target) from this edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edge">The edge.</param>
            <returns>A <see cref="T:QuikGraph.SEquatableEdge`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.IsPredecessor``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)">
            <summary>
            Checks that the <paramref name="root"/> is a predecessor of the given <paramref name="vertex"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="predecessors">Predecessors map.</param>
            <param name="root">Root vertex.</param>
            <param name="vertex">Ending vertex.</param>
            <returns>True if the <paramref name="root"/> is a predecessor of the <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predecessors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.TryGetPath``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Collections.Generic.IEnumerable{``1}@)">
            <summary>
            Tries to get the predecessor path, if reachable.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="predecessors">Predecessors map.</param>
            <param name="vertex">Path ending vertex.</param>
            <param name="path">Path to the ending vertex.</param>
            <returns>True if a path was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predecessors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.GetUndirectedVertexEquality``2">
            <summary>
            Returns the most efficient comparer for the particular type of <typeparamref name="TEdge"/>.
            If <typeparamref name="TEdge"/> implements <see cref="T:QuikGraph.IUndirectedEdge`1"/>, then only
            the (source, target) pair has to be compared; if not, (source, target) and (target, source)
            have to be compared.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <returns>The best edge equality comparer.</returns>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.UndirectedVertexEquality``1(QuikGraph.IEdge{``0},``0,``0)">
            <summary>
            Gets a value indicating if the vertices of this edge match
            <paramref name="source"/> and <paramref name="target"/>
            or <paramref name="target"/> and <paramref name="source"/> vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edge">The edge.</param>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <returns>True if both <paramref name="source"/> and
            <paramref name="target"/> match edge vertices, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.SortedVertexEquality``1(QuikGraph.IEdge{``0},``0,``0)">
            <summary>
            Gets a value indicating if the vertices of this edge match
            <paramref name="source"/> and <paramref name="target"/> vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edge">The edge.</param>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <returns>True if both <paramref name="source"/> and
            <paramref name="target"/> match edge vertices, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeExtensions.ReverseEdges``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns an enumeration of reversed edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edges">Edges to reversed.</param>
            <returns>Reversed edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.GraphExtensions">
            <summary>
            Extensions for populating graph data structures.
            </summary>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateIncidenceGraph``2(QuikGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of <see cref="T:QuikGraph.DelegateIncidenceGraph`2"/> from this getter of out-edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="tryGetOutEdges">Getter of out-edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateIncidenceGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateIncidenceGraph``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of <see cref="T:QuikGraph.DelegateIncidenceGraph`2"/> from this getter of out-edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="getOutEdges">Getter of out-edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateIncidenceGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="getOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateVertexAndEdgeListGraph``3(System.Collections.Generic.IDictionary{``0,``2})">
            <summary>
            Wraps a dictionary into a vertex and edge list graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TEdges">Type of the enumerable of out-edges.</typeparam>
            <param name="dictionary">Vertices and edges mapping.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateVertexAndEdgeListGraph``3(System.Collections.Generic.IDictionary{``0,``2},System.Converter{System.Collections.Generic.KeyValuePair{``0,``2},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Wraps a dictionary into a <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/> with the given edge conversion to get edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TValue">Type of the enumerable of out-edges.</typeparam>
            <param name="dictionary">Vertices and edges mapping.</param>
            <param name="keyValueToOutEdges">Converter of vertex/edge mapping to enumerable of edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyValueToOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateVertexAndEdgeListGraph``2(System.Collections.Generic.IEnumerable{``0},QuikGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/>
            from given vertices and edge try getter.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="vertices">Enumerable of vertices.</param>
            <param name="tryGetOutEdges">Getter of out-edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateVertexAndEdgeListGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/>
            from given vertices and edge getter.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="vertices">Enumerable of vertices.</param>
            <param name="getOutEdges">Getter of out-edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateBidirectionalIncidenceGraph``2(QuikGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}},QuikGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of <see cref="T:QuikGraph.DelegateBidirectionalIncidenceGraph`2"/>
            from these getters of edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="tryGetOutEdges">Getter of out-edges.</param>
            <param name="tryGetInEdges">Getter of in-edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateBidirectionalIncidenceGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetOutEdges"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetInEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateUndirectedGraph``2(System.Collections.Generic.IEnumerable{``0},QuikGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of <see cref="T:QuikGraph.DelegateUndirectedGraph`2"/>
            from given vertices and edge getter.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="vertices">Enumerable of vertices.</param>
            <param name="tryGetAdjacentEdges">Getter of adjacent edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateUndirectedGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetAdjacentEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToDelegateUndirectedGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of <see cref="T:QuikGraph.DelegateUndirectedGraph`2"/>
            from given vertices and edge getter.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="vertices">Enumerable of vertices.</param>
            <param name="getAdjacentEdges">Getter of adjacent edges.</param>
            <returns>A corresponding <see cref="T:QuikGraph.DelegateUndirectedGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getAdjacentEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToAdjacencyGraph``1(``0[][])">
            <summary>
            Converts a raw array of sources and targets (2 columns) vertices into a graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="edges">
            Array of vertices defining edges.
            The first items of each column represents the number of vertices following.
            </param>
            <returns>A corresponding <see cref="T:QuikGraph.AdjacencyGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/>, <paramref name="edges"/>[0] or <paramref name="edges"/>[1] is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="edges"/> length is different from 2.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="edges"/>[0] length is different from <paramref name="edges"/>[1] length.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToAdjacencyGraph``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Converts a set of edges into an <see cref="T:QuikGraph.AdjacencyGraph`2"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edges">Set of edges to convert.</param>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <returns>A corresponding <see cref="T:QuikGraph.AdjacencyGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToAdjacencyGraph``1(System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{``0}})">
            <summary>
            Converts a set of vertex pairs into an <see cref="T:QuikGraph.AdjacencyGraph`2"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexPairs">Set of vertex pairs to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.AdjacencyGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertexPairs"/> is <see langword="null"/> or at least one of vertex is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToAdjacencyGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)">
            <summary>
            Converts a set of vertices into an <see cref="T:QuikGraph.AdjacencyGraph`2"/>
            using an edge factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="vertices">Set of vertices to convert.</param>
            <param name="outEdgesFactory">The out edges factory.</param>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <returns>A corresponding <see cref="T:QuikGraph.AdjacencyGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="outEdgesFactory"/> is <see langword="null"/> or creates <see langword="null"/> edge.
            </exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToArrayAdjacencyGraph``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Creates an immutable <see cref="T:QuikGraph.ArrayAdjacencyGraph`2"/> from the input graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.ArrayAdjacencyGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToBidirectionalGraph``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Wraps a graph (out-edges only) into a bidirectional graph.
            </summary>
            <remarks>For already bidirectional graph it returns itself.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.IBidirectionalGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToBidirectionalGraph``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Converts a set of edges into a <see cref="T:QuikGraph.BidirectionalGraph`2"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edges">Set of edges to convert.</param>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <returns>A corresponding <see cref="T:QuikGraph.BidirectionalGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToBidirectionalGraph``1(System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{``0}})">
            <summary>
            Converts a set of vertex pairs into a <see cref="T:QuikGraph.BidirectionalGraph`2"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexPairs">Set of vertex pairs to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.BidirectionalGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertexPairs"/> is <see langword="null"/> or at least one of vertex is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToBidirectionalGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)">
            <summary>
            Converts a set of vertices into a <see cref="T:QuikGraph.BidirectionalGraph`2"/>
            using an edge factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="vertices">Set of vertices to convert.</param>
            <param name="outEdgesFactory">The out edges factory.</param>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <returns>A corresponding <see cref="T:QuikGraph.BidirectionalGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="outEdgesFactory"/> is <see langword="null"/> or creates <see langword="null"/> edge.
            </exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToBidirectionalGraph``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Creates a <see cref="T:QuikGraph.BidirectionalGraph`2"/> from this graph.
            </summary>
            <param name="graph">Graph to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.BidirectionalGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToArrayBidirectionalGraph``2(QuikGraph.IBidirectionalGraph{``0,``1})">
            <summary>
            Creates an immutable <see cref="T:QuikGraph.ArrayBidirectionalGraph`2"/> from the input graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.ArrayBidirectionalGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToUndirectedGraph``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Converts a sequence of edges into an <see cref="T:QuikGraph.UndirectedGraph`2"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="edges">Set of edges to convert.</param>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <returns>A corresponding <see cref="T:QuikGraph.UndirectedGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToUndirectedGraph``1(System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{``0}})">
            <summary>
            Converts a set of vertex pairs into an <see cref="T:QuikGraph.UndirectedGraph`2"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexPairs">Set of vertex pairs to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.UndirectedGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPairs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToArrayUndirectedGraph``2(QuikGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Creates an immutable <see cref="T:QuikGraph.ArrayUndirectedGraph`2"/> from the input graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to convert.</param>
            <returns>A corresponding <see cref="T:QuikGraph.ArrayUndirectedGraph`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.GraphExtensions.ToCompressedRowGraph``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Creates an immutable compressed row graph representation of the <paramref name="graph"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to visit.</param>
            <returns>A corresponding <see cref="T:QuikGraph.CompressedSparseRowGraph`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.EnumerableHelpers">
            <summary>
            Enumerable helpers.
            </summary>
        </member>
        <member name="M:QuikGraph.EnumerableHelpers.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an <see cref="T:System.Action`1"/> on each item in an enumerable,
            used to shortcut a "foreach" loop.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="elements">Enumerable to iterate through.</param>
            <param name="action">Acton to perform on each element.</param>
        </member>
        <member name="T:QuikGraph.EquateGraphs">
            <summary>
            Equality helpers for graphs.
            </summary>
        </member>
        <member name="M:QuikGraph.EquateGraphs.Equate``2(QuikGraph.IEdgeListGraph{``0,``1},QuikGraph.IEdgeListGraph{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Checks if both graphs <paramref name="g"/> and <paramref name="h"/> content are equal.
            Uses the provided <paramref name="vertexEquality"/> and <paramref name="edgeEquality"/>
            comparer to respectively compare vertices and edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="g">First graph to compare.</param>
            <param name="h">Second graph to compare.</param>
            <param name="vertexEquality">Vertex equality comparer.</param>
            <param name="edgeEquality">Edge equality comparer.</param>
            <returns>True if both graphs are equal, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexEquality"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeEquality"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EquateGraphs.Equate``2(QuikGraph.IEdgeListGraph{``0,``1},QuikGraph.IEdgeListGraph{``0,``1})">
            <summary>
            Checks if both graphs <paramref name="g"/> and <paramref name="h"/> content are equal.
            Uses the default comparer for vertices and edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="g">First graph to compare.</param>
            <param name="h">Second graph to compare.</param>
            <returns>True if both graphs are equal, false otherwise.</returns>
        </member>
        <member name="T:QuikGraph.HashCodeHelpers">
            <summary>
            Helpers to work with hash codes.
            </summary>
        </member>
        <member name="M:QuikGraph.HashCodeHelpers.Combine(System.Int32,System.Int32)">
            <summary>
            Combines two hash codes in a strong way.
            </summary>
            <param name="x">First hash code.</param>
            <param name="y">Second hash code.</param>
            <returns>The combined hash code from two hash codes.</returns>
        </member>
        <member name="M:QuikGraph.HashCodeHelpers.Combine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines three hash codes in a strong way.
            </summary>
            <param name="x">First hash code.</param>
            <param name="y">Second hash code.</param>
            <param name="z">Third hash code.</param>
            <returns>The combined hash code from three hash codes.</returns>
        </member>
        <member name="M:QuikGraph.HashCodeHelpers.Combine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines four hash codes in a strong way.
            </summary>
            <param name="x">First hash code.</param>
            <param name="y">Second hash code.</param>
            <param name="z">Third hash code.</param>
            <param name="w">Fourth hash code.</param>
            <returns>The combined hash code from four hash codes.</returns>
        </member>
        <member name="T:QuikGraph.QuikGraphHelpers">
            <summary>
            QuikGraph helpers.
            </summary>
        </member>
        <member name="M:QuikGraph.QuikGraphHelpers.ToTryFunc``2(System.Func{``0,``1})">
            <summary>
            Converts a <see cref="T:System.Func`2"/> into a <see cref="T:QuikGraph.TryFunc`2"/>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:QuikGraph.ICloneableEdge`2">
            <summary>
            Represents a cloneable edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.ICloneableEdge`2.Clone(`0,`0)">
            <summary>
            Clones this edge content to a different pair of <paramref name="source"/>
            and <paramref name="target"/> vertices.
            </summary>
            <param name="source">The source vertex of the new edge.</param>
            <param name="target">The target vertex of the new edge.</param>
            <returns>A clone of the edge with new source and target vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IEdge`1">
            <summary>
            Represents a directed edge.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:QuikGraph.IEdge`1.Source">
            <summary>
            Gets the source vertex.
            </summary>
        </member>
        <member name="P:QuikGraph.IEdge`1.Target">
            <summary>
            Gets the target vertex.
            </summary>
        </member>
        <member name="T:QuikGraph.ITermEdge`1">
            <summary>
            Represents a directed edge with terminal indexes.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:QuikGraph.ITermEdge`1.SourceTerminal">
            <summary>
            Index of terminal on source vertex to which this edge is attached.
            </summary>
        </member>
        <member name="P:QuikGraph.ITermEdge`1.TargetTerminal">
            <summary>
            Index of terminal on target vertex to which this edge is attached.
            </summary>
        </member>
        <member name="T:QuikGraph.IUndirectedEdge`1">
            <summary>
            Represents an undirected edge. 
            </summary>
            <remarks>
            Invariant: source must be less or equal to target (using the default comparer).
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="T:QuikGraph.IBidirectionalGraph`2">
            <summary>
            A directed graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>, that is efficient
            to traverse both in and out edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IBidirectionalIncidenceGraph`2">
            <summary>
            A incident directed graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>, that is efficient
            to traverse both in and out edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IBidirectionalIncidenceGraph`2.IsInEdgesEmpty(`0)">
            <summary>
            Determines whether <paramref name="vertex"/> has no in-edges.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>True if <paramref name="vertex"/> has no in-edges, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IBidirectionalIncidenceGraph`2.InDegree(`0)">
            <summary>
            Gets the number of in-edges of <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>The number of in-edges pointing towards <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IBidirectionalIncidenceGraph`2.InEdges(`0)">
            <summary>
            Gets the collection of in-edges of <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>The collection of in-edges of <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IBidirectionalIncidenceGraph`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the in-edges of <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="edges">In-edges.</param>
            <returns>True if <paramref name="vertex"/> was found or/and in-edges were found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IBidirectionalIncidenceGraph`2.InEdge(`0,System.Int32)">
            <summary>
            Gets the in-edge at location <paramref name="index"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="index">The index.</param>
            <returns>The in-edge at position <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">No vertex at <paramref name="index"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IBidirectionalIncidenceGraph`2.Degree(`0)">
            <summary>
            Gets the degree of <paramref name="vertex"/>, i.e.
            the sum of the out-degree and in-degree of <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>The sum of OutDegree and InDegree of <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="T:QuikGraph.IClusteredGraph">
            <summary>
            Represents a graph cluster.
            </summary>
        </member>
        <member name="P:QuikGraph.IClusteredGraph.Clusters">
            <summary>
            Graph clusters.
            </summary>
        </member>
        <member name="P:QuikGraph.IClusteredGraph.ClustersCount">
            <summary>
            Number of clusters.
            </summary>
        </member>
        <member name="P:QuikGraph.IClusteredGraph.Collapsed">
            <summary>
            Gets or sets the collapse state of this cluster.
            </summary>
        </member>
        <member name="M:QuikGraph.IClusteredGraph.AddCluster">
            <summary>
            Adds a new cluster.
            </summary>
            <returns>The added cluster.</returns>
        </member>
        <member name="M:QuikGraph.IClusteredGraph.RemoveCluster(QuikGraph.IClusteredGraph)">
            <summary>
            Removes the given graph from this cluster.
            </summary>
            <param name="graph">The graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IEdgeListAndIncidenceGraph`2">
            <summary>
            Represents an incidence graph whose edges can be enumerated.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IEdgeListGraph`2">
            <summary>
            A graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/> whose edges can be enumerated.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IEdgeSet`2">
            <summary>
            Represents a set of edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.IEdgeSet`2.IsEdgesEmpty">
            <summary>
            Gets a value indicating whether there are no edges in this set.
            It is true if this edge set is empty, otherwise false.
            </summary>
        </member>
        <member name="P:QuikGraph.IEdgeSet`2.EdgeCount">
            <summary>
            Gets the edge count.
            </summary>
        </member>
        <member name="P:QuikGraph.IEdgeSet`2.Edges">
            <summary>
            Gets the edges.
            </summary>
        </member>
        <member name="M:QuikGraph.IEdgeSet`2.ContainsEdge(`1)">
            <summary>
            Determines whether this set contains the specified <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to check.</param>
            <returns>True if the specified <paramref name="edge"/> is contained in this set, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IGraph`2">
            <summary>
            A graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.IGraph`2.IsDirected">
            <summary>
            Gets a value indicating if the graph is directed
            </summary>
        </member>
        <member name="P:QuikGraph.IGraph`2.AllowParallelEdges">
            <summary>
            Gets a value indicating if the graph allows parallel edges
            </summary>
        </member>
        <member name="T:QuikGraph.IHierarchy`2">
            <summary>
            Represents a hierarchy of graphs.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.IHierarchy`2.Root">
            <summary>
            Gets the root of the hierarchy.
            </summary>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.GetParent(`0)">
            <summary>
            Gets the parent vertex of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>The parent vertex if there is one, otherwise <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="vertex"/> is the root of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.GetParentEdge(`0)">
            <summary>
            Gets the parent edge of the <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>The parent vertex edge.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="vertex"/> is the root of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.IsCrossEdge(`1)">
            <summary>
            Gets a value indicating if <paramref name="edge"/> is  a cross edge.
            </summary>
            <param name="edge">The edge.</param>
            <returns>True if the edge is a cross edge, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.IsRealEdge(`1)">
            <summary>
            Gets a value indicating whether the <paramref name="edge"/> 
            exists really or is just an induced edge.
            </summary>
            <param name="edge">The edge.</param>
            <returns>True if it's a real edge, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.IsPredecessorOf(`0,`0)">
            <summary>
            Gets a value indicating if <paramref name="source"/>
            is a predecessor of <paramref name="target"/>.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <returns>True if the <paramref name="source"/> is a predecessor of <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.InducedEdgeCount(`0,`0)">
            <summary>
            Gets the number of edges between the <paramref name="source"/> and <paramref name="target"/> vertex. 
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <returns>The number of edge between <paramref name="source"/> and <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="source"/> is a predecessor of
            <paramref name="target"/> or the other-way round.
            </exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.IsInnerNode(`0)">
            <summary>
            Gets a value indicating if the <paramref name="vertex"/> is an inner node or a leaf.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>True if the <paramref name="vertex"/> is not a leaf, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.ChildrenEdges(`0)">
            <summary>
            Gets the collection of children edges from the <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>Children edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IHierarchy`2.ChildrenVertices(`0)">
            <summary>
            Gets the collection of children vertices from the <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>Children vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IImplicitGraph`2">
            <summary>
            An implicit graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IImplicitGraph`2.IsOutEdgesEmpty(`0)">
            <summary>
            Determines whether there are out-edges associated to <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>True if <paramref name="vertex"/> has no out-edges, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitGraph`2.OutDegree(`0)">
            <summary>
            Gets the count of out-edges of <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>The count of out-edges of <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitGraph`2.OutEdges(`0)">
            <summary>
            Gets the out-edges of <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>An enumeration of the out-edges of <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the out-edges of <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="edges">Out-edges.</param>
            <returns>True if <paramref name="vertex"/> was found or/and out-edges were found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitGraph`2.OutEdge(`0,System.Int32)">
            <summary>
            Gets the out-edge of <paramref name="vertex"/> at position <paramref name="index"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="index">The index.</param>
            <returns>The out-edge at position <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">No vertex at <paramref name="index"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="T:QuikGraph.IImplicitUndirectedGraph`2">
            <summary>
            An implicit undirected graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:QuikGraph.IImplicitUndirectedGraph`2.EdgeEqualityComparer">
            <summary>
            Comparer for edges.
            </summary>
        </member>
        <member name="M:QuikGraph.IImplicitUndirectedGraph`2.AdjacentEdges(`0)">
            <summary>
            Gives the enumerable of edges adjacent to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>Enumerable of adjacent edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitUndirectedGraph`2.AdjacentDegree(`0)">
            <summary>
            Gives the adjacent degree of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>Vertex adjacent degree.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(`0)">
            <summary>
            Indicates if the given <paramref name="vertex"/> has at least one adjacent edge.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>True if the vertex has at least one adjacent edge, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitUndirectedGraph`2.AdjacentEdge(`0,System.Int32)">
            <summary>
            Gets the <paramref name="index"/>th adjacent edge of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="index">Index of the adjacent edge requested.</param>
            <returns>The adjacent edge.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">No vertex at <paramref name="index"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitUndirectedGraph`2.TryGetEdge(`0,`0,`1@)">
            <summary>
            Tries to get the edge that link
            <paramref name="source"/> and <paramref name="target"/> vertices.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="edge">Edge found, otherwise <see langword="null"/>.</param>
            <returns>True if an edge was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IImplicitUndirectedGraph`2.ContainsEdge(`0,`0)">
            <summary>
            Checks if this graph contains an edge that link
            <paramref name="source"/> and <paramref name="target"/> vertices.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <returns>True if an edge exists, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IImplicitVertexSet`1">
            <summary>
            Represents an implicit set of vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.IImplicitVertexSet`1.ContainsVertex(`0)">
            <summary>
            Determines whether this set contains the specified <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the specified <paramref name="vertex"/> is contained in this set, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IIncidenceGraph`2">
            <summary>
            An incident graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IIncidenceGraph`2.ContainsEdge(`0,`0)">
            <summary>
            Checks if this graph contains an edge that link
            <paramref name="source"/> and <paramref name="target"/> vertices.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <returns>True if an edge exists, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IIncidenceGraph`2.TryGetEdge(`0,`0,`1@)">
            <summary>
            Tries to get the edge that link
            <paramref name="source"/> and <paramref name="target"/> vertices.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="edge">Edge found, otherwise <see langword="null"/>.</param>
            <returns>True if an edge was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IIncidenceGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get edges that link
            <paramref name="source"/> and <paramref name="target"/> vertices.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="edges">Edges found, otherwise <see langword="null"/>.</param>
            <returns>True if at least an edge was found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IMutableBidirectionalGraph`2">
            <summary>
            A mutable bidirectional directed graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IMutableBidirectionalGraph`2.RemoveInEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes in-edges of the given <paramref name="vertex"/> that match
            predicate <paramref name="predicate"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="predicate">Edge predicate.</param>
            <returns>Number of edges removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableBidirectionalGraph`2.ClearInEdges(`0)">
            <summary>
            Clears in-edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableBidirectionalGraph`2.ClearEdges(`0)">
            <summary>
            Clears in-edges and out-edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IMutableEdgeListGraph`2">
            <summary>
            A mutable edge list graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IMutableEdgeListGraph`2.AddEdge(`1)">
            <summary>
            Adds the <paramref name="edge"/> to this graph.
            </summary>
            <param name="edge">An edge.</param>
            <returns>True if the edge was added, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.IMutableEdgeListGraph`2.EdgeAdded">
            <summary>
            Fired when an edge is added to this graph.
            </summary>
        </member>
        <member name="M:QuikGraph.IMutableEdgeListGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a set of edges to this graph.
            </summary>
            <param name="edges">Edges to add.</param>
            <returns>The number of edges successfully added to this graph.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.IMutableEdgeListGraph`2.RemoveEdge(`1)">
            <summary>
            Removes the <paramref name="edge"/> from this graph.
            </summary>
            <param name="edge">Edge to remove.</param>
            <returns>True if the <paramref name="edge"/> was successfully removed, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.IMutableEdgeListGraph`2.EdgeRemoved">
            <summary>
            Fired when an edge has been removed from this graph.
            </summary>
        </member>
        <member name="M:QuikGraph.IMutableEdgeListGraph`2.RemoveEdgeIf(QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes all edges that match the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">Predicate to check if an edge should be removed.</param>
            <returns>The number of edges removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IMutableGraph`2">
            <summary>
            A mutable graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IMutableGraph`2.Clear">
            <summary>
            Clears the vertex and edges.
            </summary>
        </member>
        <member name="T:QuikGraph.IMutableIncidenceGraph`2">
            <summary>
            A mutable incidence graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IMutableIncidenceGraph`2.RemoveOutEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes all out-edges of the <paramref name="vertex"/>
            where the <paramref name="predicate"/> is evaluated to true.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="predicate">Predicate to remove edges.</param>
            <returns>The number of removed edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableIncidenceGraph`2.ClearOutEdges(`0)">
            <summary>
            Trims the out-edges of the given <paramref name="vertex"/>
            </summary>
            <param name="vertex">The vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableIncidenceGraph`2.TrimEdgeExcess">
            <summary>
            Trims excess storage allocated for edges.
            </summary>
        </member>
        <member name="T:QuikGraph.IMutableTermBidirectionalGraph`2">
            <summary>
            A mutable directed graph with vertices of type <typeparamref name="TVertex"/>
            and terminal edges of type <typeparamref name="TEdge"/>, that is efficient
            to traverse both in and out edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IMutableUndirectedGraph`2">
            <summary>
            A mutable indirect graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IMutableUndirectedGraph`2.RemoveAdjacentEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes adjacent edges of the given <paramref name="vertex"/> if edge matches the <paramref name="predicate"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="predicate">Predicate to match edges.</param>
            <returns>The number of removed edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableUndirectedGraph`2.ClearAdjacentEdges(`0)">
            <summary>
            Clears adjacent edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IMutableVertexAndEdgeListGraph`2">
            <summary>
            A mutable vertex and edge list graph with vertices of type
            <typeparamref name="TVertex"/> and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IMutableVertexAndEdgeSet`2">
            <summary>
            A mutable vertex and edge set.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(`1)">
            <summary>
            Adds <paramref name="edge"/> and its vertices to this graph.
            </summary>
            <param name="edge">The edge to add.</param>
            <returns>True if the edge was added, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a set of edges (and it's vertices if necessary).
            </summary>
            <param name="edges">Edges to add.</param>
            <returns>The number of edges added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:QuikGraph.IMutableVertexListGraph`2">
            <summary>
            A mutable vertex list graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IMutableVertexSet`1">
            <summary>
            Represents a mutable set of vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="E:QuikGraph.IMutableVertexSet`1.VertexAdded">
            <summary>
            Fired when a vertex is added to this set.
            </summary>
        </member>
        <member name="M:QuikGraph.IMutableVertexSet`1.AddVertex(`0)">
            <summary>
            Adds a vertex to this set.
            </summary>
            <param name="vertex">Vertex to add.</param>
            <returns>True if the vertex was added, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableVertexSet`1.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds given vertices to this set.
            </summary>
            <param name="vertices">Vertices to add.</param>
            <returns>The number of vertex added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="E:QuikGraph.IMutableVertexSet`1.VertexRemoved">
            <summary>
            Fired when a vertex is removed from this set.
            </summary>
        </member>
        <member name="M:QuikGraph.IMutableVertexSet`1.RemoveVertex(`0)">
            <summary>
            Removes the given vertex from this set.
            </summary>
            <param name="vertex">Vertex to remove.</param>
            <returns>True if the vertex was removed, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.IMutableVertexSet`1.RemoveVertexIf(QuikGraph.VertexPredicate{`0})">
            <summary>
            Removes all vertices matching the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">Predicate to check on each vertex.</param>
            <returns>The number of vertex removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.ITermBidirectionalGraph`2">
            <summary>
            A directed graph with vertices of type <typeparamref name="TVertex"/>
            and terminal edges of type <typeparamref name="TEdge"/>, that is efficient
            to traverse both in and out edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.OutTerminalCount(`0)">
            <summary>
            Gets the number of out terminals on the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>Number of out terminals.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.IsOutEdgesEmptyAt(`0,System.Int32)">
            <summary>
            Checks if the requested out terminal is empty or not for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">Out terminal index.</param>
            <returns>True if the out terminal is empty, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.OutDegreeAt(`0,System.Int32)">
            <summary>
            Gets the <paramref name="vertex"/> out-degree for the requested terminal.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">Out terminal index.</param>
            <returns>The <paramref name="vertex"/> out-degree on terminal <paramref name="terminal"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.OutEdgesAt(`0,System.Int32)">
            <summary>
            Gets the <paramref name="vertex"/> out edges for the requested terminal.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">Out terminal index.</param>
            <returns>The <paramref name="vertex"/> out-edges on terminal <paramref name="terminal"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.TryGetOutEdgesAt(`0,System.Int32,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the <paramref name="vertex"/> out-edges for the requested terminal.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">Out terminal index.</param>
            <param name="edges">Out-edges found, otherwise <see langword="null"/>.</param>
            <returns>True if <paramref name="vertex"/> was found or/and out-edges were found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.InTerminalCount(`0)">
            <summary>
            Gets the number of in terminals on the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>Number of in terminals.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.IsInEdgesEmptyAt(`0,System.Int32)">
            <summary>
            Checks if the requested in terminal is empty or not for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">In terminal index.</param>
            <returns>True if the in terminal is empty, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.InDegreeAt(`0,System.Int32)">
            <summary>
            Gets the <paramref name="vertex"/> in-degree for the requested terminal.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">In terminal index.</param>
            <returns>The <paramref name="vertex"/> in-degree on terminal <paramref name="terminal"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.InEdgesAt(`0,System.Int32)">
            <summary>
            Gets the <paramref name="vertex"/> in-edges for the requested terminal.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">In terminal index.</param>
            <returns>The <paramref name="vertex"/> in-edges on terminal <paramref name="terminal"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.ITermBidirectionalGraph`2.TryGetInEdgesAt(`0,System.Int32,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the <paramref name="vertex"/> in-edges for the requested terminal.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="terminal">Out terminal index.</param>
            <param name="edges">In-edges found, otherwise <see langword="null"/>.</param>
            <returns>True if <paramref name="vertex"/> was found or/and in-edges were found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.IUndirectedGraph`2">
            <summary>
            An undirected graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IVertexAndEdgeListGraph`2">
            <summary>
            A directed graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/> that can be enumerated efficiently.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IVertexListGraph`2">
            <summary>
            A directed graph data structure where out-edges can be traversed,
            i.e. a vertex set + implicit graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:QuikGraph.IVertexSet`1">
            <summary>
            Represents a set of vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:QuikGraph.IVertexSet`1.IsVerticesEmpty">
            <summary>
            Gets a value indicating whether there are no vertices in this set.
            It is true if this vertex set is empty, otherwise false.
            </summary>
        </member>
        <member name="P:QuikGraph.IVertexSet`1.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="P:QuikGraph.IVertexSet`1.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="T:QuikGraph.ITagged`1">
            <summary>
            Represents an object that is able to be tagged.
            </summary>
            <typeparam name="TTag">Tag type.</typeparam>
        </member>
        <member name="E:QuikGraph.ITagged`1.TagChanged">
            <summary>
            Fired when the tag is changed.
            </summary>
        </member>
        <member name="P:QuikGraph.ITagged`1.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="T:QuikGraph.Predicates.FilteredBidirectionalGraph`3">
            <summary>
            Bidirectional graph data structure that is filtered with a vertex and an edge
            predicate. This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredBidirectionalGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredBidirectionalGraph`3.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredBidirectionalGraph`3.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredBidirectionalGraph`3.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.IsInEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.InDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.InEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.InEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredBidirectionalGraph`3.Degree(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.FilteredEdgeListGraph`3">
            <summary>
            Edge list graph data structure that is filtered with a vertex and an edge
            predicate. This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredEdgeListGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredEdgeListGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredEdgeListGraph`3.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredEdgeListGraph`3.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredEdgeListGraph`3.Vertices">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredEdgeListGraph`3.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredEdgeListGraph`3.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredEdgeListGraph`3.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredEdgeListGraph`3.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.FilteredGraph`3">
            <summary>
            Graph data structure that is filtered with a vertex and an edge predicate.
            This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredGraph`3.BaseGraph">
            <summary>
            Underlying graph (graph that is filtered).
            </summary>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredGraph`3.VertexPredicate">
            <summary>
            Vertex predicate used to filter the vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredGraph`3.EdgePredicate">
            <summary>
            Edge predicate used to filter the edges.
            </summary>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredGraph`3.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredGraph`3.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredGraph`3.FilterEdge(`1)">
            <summary>
            Tests if the given <paramref name="edge"/> matches
            <see cref="P:QuikGraph.Predicates.FilteredGraph`3.VertexPredicate"/> for edge source and target
            and the <see cref="P:QuikGraph.Predicates.FilteredGraph`3.EdgePredicate"/>.
            </summary>
            <param name="edge">Edge to check.</param>
            <returns>True if the <paramref name="edge"/> matches all predicates, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Predicates.FilteredImplicitGraph`3">
            <summary>
            Represents an implicit graph that is filtered with a vertex and an edge predicate.
            This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredImplicitGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitGraph`3.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitGraph`3.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitGraph`3.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitGraph`3.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitGraph`3.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.FilteredImplicitVertexSet`3">
            <summary>
            Implicit vertex set graph data structure that is filtered with a vertex and an edge
            predicate. This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitVertexSet`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredImplicitVertexSet`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredImplicitVertexSet`3.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.FilteredIncidenceGraph`3">
            <summary>
            Incidence graph data structure that is filtered with a vertex and an edge
            predicate. This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredIncidenceGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredIncidenceGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredIncidenceGraph`3.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredIncidenceGraph`3.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredIncidenceGraph`3.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.FilteredUndirectedGraph`3">
            <summary>
            Undirected graph data structure that is filtered with a vertex and an edge
            predicate. This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredUndirectedGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredUndirectedGraph`3.EdgeEqualityComparer">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredUndirectedGraph`3.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredUndirectedGraph`3.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredUndirectedGraph`3.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredUndirectedGraph`3.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredUndirectedGraph`3.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredUndirectedGraph`3.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.AdjacentEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.AdjacentDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.IsAdjacentEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.AdjacentEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredUndirectedGraph`3.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.FilteredVertexAndEdgeListGraph`3">
            <summary>
            Vertex and edge list graph data structure that is filtered with a vertex and an edge
            predicate. This means only vertex and edge matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredVertexAndEdgeListGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredVertexAndEdgeListGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredVertexAndEdgeListGraph`3.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredVertexAndEdgeListGraph`3.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredVertexAndEdgeListGraph`3.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Predicates.FilteredVertexAndEdgeListGraph`3.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.FilteredVertexListGraph`3">
            <summary>
            Vertex list graph data structure that is filtered with a vertex and an edge
            predicate. This means only vertex matching predicates are "accessible".
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.FilteredVertexListGraph`3.#ctor(`2,QuikGraph.VertexPredicate{`0},QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.FilteredVertexListGraph`3"/> class.
            </summary>
            <param name="baseGraph">Graph in which applying predicates.</param>
            <param name="vertexPredicate">Predicate to match vertex that should be taken into account.</param>
            <param name="edgePredicate">Predicate to match edge that should be taken into account.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgePredicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.FilteredVertexListGraph`3.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredVertexListGraph`3.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Predicates.FilteredVertexListGraph`3.Vertices">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.Predicates.InDictionaryVertexPredicate`2">
            <summary>
            Predicate that tests if a vertex is a vertex map.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TValue">Type of the value associated to vertices.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.InDictionaryVertexPredicate`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.InDictionaryVertexPredicate`2"/> class.
            </summary>
            <param name="vertexMap">Vertex map.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexMap"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Predicates.InDictionaryVertexPredicate`2.Test(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is in the vertex map.
            </summary>
            <remarks>Check if the implemented predicate is matched.</remarks>
            <param name="vertex">Vertex to use in predicate.</param>
            <returns>True if the vertex is in the vertex map, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Predicates.IsolatedVertexPredicate`2">
            <summary>
            Predicate that detects if a vertex is isolated (without any input or output edges).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.IsolatedVertexPredicate`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.IsolatedVertexPredicate`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to consider.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Predicates.IsolatedVertexPredicate`2.Test(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is isolated.
            </summary>
            <remarks>Check if the implemented predicate is matched.</remarks>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the vertex is isolated, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Predicates.ResidualEdgePredicate`2">
            <summary>
            Predicate that tests if an edge is residual.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.ResidualEdgePredicate`2.#ctor(System.Collections.Generic.IDictionary{`1,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.ResidualEdgePredicate`2"/> class.
            </summary>
            <param name="residualCapacities">Residual capacities per edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="residualCapacities"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.ResidualEdgePredicate`2.ResidualCapacities">
            <summary>
            Residual capacities map.
            </summary>
        </member>
        <member name="M:QuikGraph.Predicates.ResidualEdgePredicate`2.Test(`1)">
            <summary>
            Checks if the given <paramref name="edge"/> is residual.
            </summary>
            <remarks>Check if the implemented predicate is matched.</remarks>
            <param name="edge">Edge to use in predicate.</param>
            <returns>True if the edge is residual, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Predicates.ReversedResidualEdgePredicate`2">
            <summary>
            Predicate that tests if an edge's reverse is residual.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.ReversedResidualEdgePredicate`2.#ctor(System.Collections.Generic.IDictionary{`1,System.Double},System.Collections.Generic.IDictionary{`1,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.ReversedResidualEdgePredicate`2"/> class.
            </summary>
            <param name="residualCapacities">Residual capacities per edge.</param>
            <param name="reversedEdges">Map of edges and their reversed edges.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="residualCapacities"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="reversedEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Predicates.ReversedResidualEdgePredicate`2.ResidualCapacities">
            <summary>
            Residual capacities map.
            </summary>
        </member>
        <member name="P:QuikGraph.Predicates.ReversedResidualEdgePredicate`2.ReversedEdges">
            <summary>
            Reversed edges map.
            </summary>
        </member>
        <member name="M:QuikGraph.Predicates.ReversedResidualEdgePredicate`2.Test(`1)">
            <summary>
            Checks if the given <paramref name="edge"/> reverse is residual.
            </summary>
            <remarks>Check if the implemented predicate is matched.</remarks>
            <param name="edge">Edge to use in predicate.</param>
            <returns>True if the reversed edge is residual, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Predicates.SinkVertexPredicate`2">
            <summary>
            Predicate that tests if a vertex is a sink vertex (no output edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.Predicates.SinkVertexPredicate`2.#ctor(QuikGraph.IIncidenceGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Predicates.SinkVertexPredicate`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to consider.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.Predicates.SinkVertexPredicate`2.Test(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is a sink vertex.
            </summary>
            <remarks>Check if the implemented predicate is matched.</remarks>
            <param name="vertex">Vertex to use in predicate.</param>
            <returns>True if the vertex is a sink, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:QuikGraph.Edge`1">
            <summary>
            The default <see cref="T:QuikGraph.IEdge`1"/> implementation (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.Edge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.Edge`1"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.Edge`1.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.Edge`1.Target">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.Edge`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.EquatableEdge`1">
            <summary>
            An <see cref="T:QuikGraph.IEdge`1"/> implementation that supports equality (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.EquatableEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EquatableEdge`1"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EquatableEdge`1.Equals(QuikGraph.EquatableEdge{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableEdge`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableEdge`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.EquatableTaggedEdge`2">
            <summary>
            The default implementation of an <see cref="T:QuikGraph.IEdge`1"/> that supports tagging and is equatable (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TTag">Tag type.</typeparam>
        </member>
        <member name="M:QuikGraph.EquatableTaggedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EquatableTaggedEdge`2"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="tag">Edge tag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.EquatableTaggedEdge`2.TagChanged">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableTaggedEdge`2.OnTagChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:QuikGraph.EquatableTaggedEdge`2.TagChanged"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:QuikGraph.EquatableTaggedEdge`2.Tag">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableTaggedEdge`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.EquatableTermEdge`1">
            <summary>
            An <see cref="T:QuikGraph.ITermEdge`1"/> implementation that supports equality (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.EquatableTermEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EquatableTermEdge`1"/> class
            using source/target vertices and zero terminals.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EquatableTermEdge`1.#ctor(`0,`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EquatableTermEdge`1"/> class
            using source/target vertices and source/target terminals.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="sourceTerminal">The source terminal.</param>
            <param name="targetTerminal">The target terminal.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceTerminal"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetTerminal"/> is negative.</exception>
        </member>
        <member name="M:QuikGraph.EquatableTermEdge`1.Equals(QuikGraph.EquatableTermEdge{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableTermEdge`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableTermEdge`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.EquatableUndirectedEdge`1">
            <summary>
            The default struct based <see cref="T:QuikGraph.IUndirectedEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.EquatableUndirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EquatableUndirectedEdge`1"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EquatableUndirectedEdge`1.Equals(QuikGraph.EquatableUndirectedEdge{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableUndirectedEdge`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EquatableUndirectedEdge`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.SEdge`1">
            <summary>
            The default struct based <see cref="T:QuikGraph.IEdge`1"/> implementation (it is by design an equatable edge) (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.SEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.SEdge`1"/> struct.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.SEdge`1.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.SEdge`1.Target">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEdge`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.SEquatableEdge`1">
            <summary>
            A struct based <see cref="T:QuikGraph.IEdge`1"/> implementation that supports equality (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.SEquatableEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.SEquatableEdge`1"/> struct.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.SEquatableEdge`1.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.SEquatableEdge`1.Target">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableEdge`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableEdge`1.Equals(QuikGraph.SEquatableEdge{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableEdge`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableEdge`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.SEquatableTaggedEdge`2">
            <summary>
            The default implementation of an <see cref="T:QuikGraph.IEdge`1"/> that supports tagging (struct) (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TTag">Tag type.</typeparam>
        </member>
        <member name="M:QuikGraph.SEquatableTaggedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.SEquatableTaggedEdge`2"/> struct.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="tag">Edge tag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.SEquatableTaggedEdge`2.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.SEquatableTaggedEdge`2.Target">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.SEquatableTaggedEdge`2.TagChanged">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableTaggedEdge`2.OnTagChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:QuikGraph.SEquatableTaggedEdge`2.TagChanged"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:QuikGraph.SEquatableTaggedEdge`2.Tag">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableTaggedEdge`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableTaggedEdge`2.Equals(QuikGraph.SEquatableTaggedEdge{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableTaggedEdge`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SEquatableTaggedEdge`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.SReversedEdge`2">
            <summary>
            The default struct based reversed <see cref="T:QuikGraph.IEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.SReversedEdge`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.SReversedEdge`2"/> struct.
            </summary>
            <param name="originalEdge">Original edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="originalEdge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.SReversedEdge`2.OriginalEdge">
            <summary>
            Original edge.
            </summary>
        </member>
        <member name="P:QuikGraph.SReversedEdge`2.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.SReversedEdge`2.Target">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SReversedEdge`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SReversedEdge`2.Equals(QuikGraph.SReversedEdge{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SReversedEdge`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SReversedEdge`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.STaggedEdge`2">
            <summary>
            The default implementation of an <see cref="T:QuikGraph.IEdge`1"/> that supports tagging (struct) (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TTag">Tag type.</typeparam>
        </member>
        <member name="M:QuikGraph.STaggedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.STaggedEdge`2"/> struct.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="tag">Edge tag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.STaggedEdge`2.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.STaggedEdge`2.Target">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.STaggedEdge`2.TagChanged">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.STaggedEdge`2.OnTagChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:QuikGraph.STaggedEdge`2.TagChanged"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:QuikGraph.STaggedEdge`2.Tag">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.STaggedEdge`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.STaggedUndirectedEdge`2">
            <summary>
            The default implementation of an <see cref="T:QuikGraph.IUndirectedEdge`1"/> that supports tagging (struct).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TTag">Tag type.</typeparam>
        </member>
        <member name="M:QuikGraph.STaggedUndirectedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.STaggedUndirectedEdge`2"/> struct.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="tag">Edge tag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is not lower than <paramref name="source"/> when using <see cref="M:System.Collections.Generic.Comparer{T}.Default"/>.
            </exception>
        </member>
        <member name="P:QuikGraph.STaggedUndirectedEdge`2.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.STaggedUndirectedEdge`2.Target">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.STaggedUndirectedEdge`2.TagChanged">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.STaggedUndirectedEdge`2.OnTagChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:QuikGraph.STaggedUndirectedEdge`2.TagChanged"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:QuikGraph.STaggedUndirectedEdge`2.Tag">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.STaggedUndirectedEdge`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.SUndirectedEdge`1">
            <summary>
            A struct based <see cref="T:QuikGraph.IUndirectedEdge`1"/> implementation (it is by design an equatable edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.SUndirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.SUndirectedEdge`1"/> struct.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.SUndirectedEdge`1.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.SUndirectedEdge`1.Target">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.SUndirectedEdge`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.TaggedEdge`2">
            <summary>
            The default implementation of an <see cref="T:QuikGraph.IEdge`1"/> that supports tagging (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TTag">Tag type.</typeparam>
        </member>
        <member name="M:QuikGraph.TaggedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.TaggedEdge`2"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="tag">Edge tag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.TaggedEdge`2.TagChanged">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.TaggedEdge`2.OnTagChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:QuikGraph.TaggedEdge`2.TagChanged"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:QuikGraph.TaggedEdge`2.Tag">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.TaggedEdge`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.TaggedUndirectedEdge`2">
            <summary>
            The default implementation of an <see cref="T:QuikGraph.IUndirectedEdge`1"/> that supports tagging.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TTag">Tag type.</typeparam>
        </member>
        <member name="M:QuikGraph.TaggedUndirectedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.TaggedUndirectedEdge`2"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="tag">Edge tag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:QuikGraph.TaggedUndirectedEdge`2.TagChanged">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.TaggedUndirectedEdge`2.OnTagChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:QuikGraph.TaggedUndirectedEdge`2.TagChanged"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:QuikGraph.TaggedUndirectedEdge`2.Tag">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.TaggedUndirectedEdge`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.TermEdge`1">
            <summary>
            The default <see cref="T:QuikGraph.ITermEdge`1"/> implementation (directed edge).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.TermEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.TermEdge`1"/> class
            using source/target vertices and zero terminals.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.TermEdge`1.#ctor(`0,`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.TermEdge`1"/> class
            using source/target vertices and source/target terminals.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="sourceTerminal">The source terminal.</param>
            <param name="targetTerminal">The target terminal.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceTerminal"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetTerminal"/> is negative.</exception>
        </member>
        <member name="P:QuikGraph.TermEdge`1.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.TermEdge`1.Target">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.TermEdge`1.SourceTerminal">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.TermEdge`1.TargetTerminal">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.TermEdge`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.UndirectedEdge`1">
            <summary>
            The default <see cref="T:QuikGraph.IUndirectedEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.UndirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.UndirectedEdge`1"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is not lower than <paramref name="source"/> when using <see cref="M:System.Collections.Generic.Comparer{T}.Default"/>.
            </exception>
        </member>
        <member name="P:QuikGraph.UndirectedEdge`1.Source">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedEdge`1.Target">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedEdge`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.AdjacencyGraph`2">
            <summary>
            Mutable directed graph data structure.
            </summary>
            <remarks>
            It is efficient for sparse graph representation
            where out-edge need to be enumerated only.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.AdjacencyGraph`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.AdjacencyGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.AdjacencyGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="capacity">Vertex capacity.</param>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.AdjacencyGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="vertexCapacity">Vertex capacity.</param>
            <param name="edgeCapacity">Edge capacity.</param>
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.EdgeCapacity">
            <summary>
            Gets or sets the edge capacity.
            </summary>
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.VertexType">
            <summary>
            Gets the type of vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.EdgeType">
            <summary>
            Gets the type of edges.
            </summary>
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.AdjacencyGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.AddVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.AdjacencyGraph`2.VertexAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.OnVertexAdded(`0)">
            <summary>
            Called on each added vertex.
            </summary>
            <param name="vertex">Added vertex.</param>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.RemoveVertex(`0)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.AdjacencyGraph`2.VertexRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.OnVertexRemoved(`0)">
            <summary>
            Called for each removed vertex.
            </summary>
            <param name="vertex">Removed vertex.</param>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.RemoveVertexIf(QuikGraph.VertexPredicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.AddVerticesAndEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.AddEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.AdjacencyGraph`2.EdgeAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.OnEdgeAdded(`1)">
            <summary>
            Called on each added edge.
            </summary>
            <param name="edge">Added edge.</param>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.RemoveEdge(`1)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.AdjacencyGraph`2.EdgeRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.OnEdgeRemoved(`1)">
            <summary>
            Called on each removed edge.
            </summary>
            <param name="edge">Removed edge.</param>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.RemoveEdgeIf(QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.RemoveOutEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.ClearOutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.ClearEdges(`0)">
            <summary>
            Clears edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.TrimEdgeExcess">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.Clone">
            <summary>
            Clones this graph.
            </summary>
            <returns>Cloned graph.</returns>
        </member>
        <member name="M:QuikGraph.AdjacencyGraph`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.ArrayAdjacencyGraph`2">
            <summary>
            Immutable directed graph data structure.
            </summary>
            <remarks>
            It is efficient for large sparse graph representation
            where out-edge need to be enumerated only.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.ArrayAdjacencyGraph`2"/> class.
            </summary>
            <param name="baseGraph">Wrapped graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayAdjacencyGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.Clone">
            <summary>
            Clones this graph, returns this instance because this class is immutable.
            </summary>
            <returns>This graph.</returns>
        </member>
        <member name="M:QuikGraph.ArrayAdjacencyGraph`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.ArrayBidirectionalGraph`2">
            <summary>
            Immutable bidirectional directed graph data structure.
            </summary>
            <remarks>
            It can be used for large sparse graph representation where
            out-edge need to be enumerated only.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.ArrayBidirectionalGraph`2"/> class.
            </summary>
            <param name="baseGraph">Wrapped graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayBidirectionalGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.IsInEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.InDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.InEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.InEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.Degree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.Clone">
            <summary>
            Clones this graph, returns this instance because this class is immutable.
            </summary>
            <returns>This graph.</returns>
        </member>
        <member name="M:QuikGraph.ArrayBidirectionalGraph`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.ArrayUndirectedGraph`2">
            <summary>
            Immutable undirected graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.#ctor(QuikGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.ArrayUndirectedGraph`2"/> class.
            </summary>
            <param name="baseGraph">Wrapped graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.EdgeEqualityComparer">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ArrayUndirectedGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.AdjacentEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.AdjacentDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.IsAdjacentEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.AdjacentEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.Clone">
            <summary>
            Clones this graph, returns this instance because this class is immutable.
            </summary>
            <returns>This graph.</returns>
        </member>
        <member name="M:QuikGraph.ArrayUndirectedGraph`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.BidirectionalAdapterGraph`2">
            <summary>
            Wrapper of a graph adapting it to become bidirectional.
            </summary>
            <remarks>Vertex list graph for out-edges only and dictionary cache for in-edges.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.BidirectionalAdapterGraph`2"/> class.
            </summary>
            <param name="baseGraph">Wrapped graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalAdapterGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.IsInEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.InDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.InEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.InEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalAdapterGraph`2.Degree(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.BidirectionalGraph`2">
            <summary>
            Mutable directed graph data structure.
            </summary>
            <remarks>
            It is efficient for sparse graph representation
            where out-edge and in-edges need to be enumerated.
            Requires twice as much memory as the <see cref="T:QuikGraph.AdjacencyGraph`2"/>.
            </remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.BidirectionalGraph`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.BidirectionalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.BidirectionalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="capacity">Vertex capacity.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.BidirectionalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="vertexCapacity">Vertex capacity.</param>
            <param name="edgeCapacity">Edge capacity.</param>
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.EdgeCapacity">
            <summary>
            Gets or sets the edge capacity.
            </summary>
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.VertexType">
            <summary>
            Gets the type of vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.EdgeType">
            <summary>
            Gives the type of edges.
            </summary>
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.IsInEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.InDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.InEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.InEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.Degree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.AddVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.BidirectionalGraph`2.VertexAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.OnVertexAdded(`0)">
            <summary>
            Called on each added vertex.
            </summary>
            <param name="vertex">Added vertex.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.RemoveVertex(`0)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.BidirectionalGraph`2.VertexRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.OnVertexRemoved(`0)">
            <summary>
            Called for each removed vertex.
            </summary>
            <param name="vertex">Removed vertex.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.RemoveVertexIf(QuikGraph.VertexPredicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.AddEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.BidirectionalGraph`2.EdgeAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.OnEdgeAdded(`1)">
            <summary>
            Called on each added edge.
            </summary>
            <param name="edge">Added edge.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.RemoveEdge(`1)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.BidirectionalGraph`2.EdgeRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.OnEdgeRemoved(`1)">
            <summary>
            Called on each removed edge.
            </summary>
            <param name="edge">Removed edge.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.RemoveEdgeIf(QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.AddVerticesAndEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.RemoveOutEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.ClearOutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.TrimEdgeExcess">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.RemoveInEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.ClearInEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.ClearEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.MergeVertex(`0,QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Removes the given <paramref name="vertex"/> and merges all its connection to other vertices.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="edgeFactory">Factory method to create an edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.MergeVerticesIf(QuikGraph.VertexPredicate{`0},QuikGraph.EdgeFactory{`0,`1})">
            <summary>
            Removes vertices matching the given <paramref name="vertexPredicate"/> and merges all their
            connections to other vertices.
            </summary>
            <param name="vertexPredicate">Predicate to match vertices.</param>
            <param name="edgeFactory">Factory method to create an edge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexPredicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.#ctor(QuikGraph.BidirectionalGraph{`0,`1})">
            <summary>
            Copy constructor that creates sufficiently deep copy of the graph.
            </summary>
            <param name="other">Graph to copy.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.Clone">
            <summary>
            Clones this graph.
            </summary>
            <returns>Cloned graph.</returns>
        </member>
        <member name="M:QuikGraph.BidirectionalGraph`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.BidirectionalMatrixGraph`1">
            <summary>
            Mutable bidirectional graph data structure based on a matrix.
            </summary>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.BidirectionalMatrixGraph`1"/> class.
            </summary>
            <param name="vertexCount">Number of vertices.</param>
            <exception cref="T:System.ArgumentException"><paramref name="vertexCount"/> is is negative or equal to 0.</exception>
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.ContainsVertex(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.BidirectionalMatrixGraph`1.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.ContainsEdge(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.ContainsEdge(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.TryGetEdge(System.Int32,System.Int32,`0@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.TryGetEdges(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.IsOutEdgesEmpty(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.OutDegree(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.OutEdges(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.TryGetOutEdges(System.Int32,System.Collections.Generic.IEnumerable{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.OutEdge(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.IsInEdgesEmpty(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.InDegree(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.InEdges(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.TryGetInEdges(System.Int32,System.Collections.Generic.IEnumerable{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.InEdge(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.Degree(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.RemoveInEdgeIf(System.Int32,QuikGraph.EdgePredicate{System.Int32,`0})">
            <summary>
            Removes in-edges of the given <paramref name="vertex"/> that match
            predicate <paramref name="predicate"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="predicate">Edge predicate.</param>
            <returns>Number of edges removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.ClearInEdges(System.Int32)">
            <summary>
            Clears the in-edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.ClearEdges(System.Int32)">
            <summary>
            Clears the in-edges and out-edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.RemoveOutEdgeIf(System.Int32,QuikGraph.EdgePredicate{System.Int32,`0})">
            <summary>
            Removes all out-edges of the <paramref name="vertex"/>
            where the <paramref name="predicate"/> is evaluated to true.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="predicate">Predicate to remove edges.</param>
            <returns>The number of removed edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.ClearOutEdges(System.Int32)">
            <summary>
            Clears the out-edges of the given <paramref name="vertex"/>
            </summary>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.AddEdge(`0)">
            <inheritdoc />
            <exception cref="T:QuikGraph.ParallelEdgeNotAllowedException"><paramref name="edge"/> is already present in graph.</exception>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.AddEdgeRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.BidirectionalMatrixGraph`1.EdgeAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.OnEdgeAdded(`0)">
            <summary>
            Called on each added edge.
            </summary>
            <param name="edge">Added edge.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.RemoveEdge(`0)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.BidirectionalMatrixGraph`1.EdgeRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.OnEdgeRemoved(`0)">
            <summary>
            Called on each removed edge.
            </summary>
            <param name="edge">Removed edge.</param>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.RemoveEdgeIf(QuikGraph.EdgePredicate{System.Int32,`0})">
            <summary>
            <see cref="M:QuikGraph.BidirectionalMatrixGraph`1.RemoveEdgeIf(QuikGraph.EdgePredicate{System.Int32,`0})"/> is not implemented for this kind of graph.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.Clone">
            <summary>
            Clones this graph.
            </summary>
            <returns>Cloned graph.</returns>
        </member>
        <member name="M:QuikGraph.BidirectionalMatrixGraph`1.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.ClusteredAdjacencyGraph`2">
            <summary>
            Mutable clustered adjacency graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.#ctor(QuikGraph.AdjacencyGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.ClusteredAdjacencyGraph`2"/> class.
            </summary>
            <param name="wrappedGraph">Graph to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="wrappedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.#ctor(QuikGraph.ClusteredAdjacencyGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.ClusteredAdjacencyGraph`2"/> class.
            </summary>
            <param name="parentGraph">Parent graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parentGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.Parent">
            <summary>
            Parent graph.
            </summary>
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.Wrapped">
            <summary>
            Wrapped graph.
            </summary>
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.EdgeCapacity">
            <summary>
            Gets or sets the edge capacity.
            </summary>
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.VertexType">
            <summary>
            Gets the type of vertices.
            </summary>
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.EdgeType">
            <summary>
            Gets the type of edges.
            </summary>
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.Collapsed">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.Clusters">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.ClustersCount">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.AddCluster">
            <summary>
            Adds a new cluster.
            </summary>
            <returns>The added cluster.</returns>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.QuikGraph#IClusteredGraph#AddCluster">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.RemoveCluster(QuikGraph.IClusteredGraph)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ClusteredAdjacencyGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.AddVertex(`0)">
            <summary>
            Adds a vertex to this graph.
            </summary>
            <param name="vertex">Vertex to add.</param>
            <returns>True if the vertex was added, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds given vertices to this graph.
            </summary>
            <param name="vertices">Vertices to add.</param>
            <returns>The number of vertex added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.RemoveChildVertex(`0)">
            <summary>
            Removes the given vertex from clusters.
            </summary>
            <param name="vertex">Vertex to remove.</param>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.RemoveVertex(`0)">
            <summary>
            Removes the given vertex from this graph.
            </summary>
            <param name="vertex">Vertex to remove.</param>
            <returns>True if the vertex was removed, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.RemoveVertexIf(QuikGraph.VertexPredicate{`0})">
            <summary>
            Removes all vertices matching the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">Predicate to check on each vertex.</param>
            <returns>The number of vertex removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.AddVerticesAndEdge(`1)">
            <summary>
            Adds <paramref name="edge"/> and its vertices to this graph.
            </summary>
            <param name="edge">The edge to add.</param>
            <returns>True if the edge was added, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a set of edges (and it's vertices if necessary).
            </summary>
            <param name="edges">Edges to add.</param>
            <returns>The number of edges added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.AddEdge(`1)">
            <summary>
            Adds the <paramref name="edge"/> to this graph.
            </summary>
            <param name="edge">An edge.</param>
            <returns>True if the edge was added, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a set of edges to this graph.
            </summary>
            <param name="edges">Edges to add.</param>
            <returns>The number of edges successfully added to this graph.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.RemoveEdge(`1)">
            <summary>
            Removes the <paramref name="edge"/> from this graph.
            </summary>
            <param name="edge">Edge to remove.</param>
            <returns>True if the <paramref name="edge"/> was successfully removed, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.RemoveEdgeIf(QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes all edges that match the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">Predicate to check if an edge should be removed.</param>
            <returns>The number of edges removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.RemoveOutEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes all out-edges of the <paramref name="vertex"/>
            where the <paramref name="predicate"/> is evaluated to true.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="predicate">Predicate to remove edges.</param>
            <returns>The number of removed edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.ClearOutEdges(`0)">
            <summary>
            Clears the out-edges of the given <paramref name="vertex"/>
            </summary>
            <param name="vertex">The vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.ClusteredAdjacencyGraph`2.Clear">
            <summary>
            Clears the vertex and edges.
            </summary>
        </member>
        <member name="T:QuikGraph.CompressedSparseRowGraph`1">
            <summary>
            Directed graph data structure using a compressed sparse row representation.
            (http://www.cs.utk.edu/~dongarra/etemplates/node373.html)
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.FromGraph``1(QuikGraph.IVertexAndEdgeListGraph{`0,``0})">
            <summary>
            Converts the given <paramref name="graph"/> to a <see cref="T:QuikGraph.CompressedSparseRowGraph`1"/>.
            </summary>
            <param name="graph">Graph to convert.</param>
            <typeparam name="TEdge">Edge type.</typeparam>
            <returns>A corresponding <see cref="T:QuikGraph.CompressedSparseRowGraph`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.CompressedSparseRowGraph`1.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.ContainsEdge(QuikGraph.SEquatableEdge{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.TryGetEdge(`0,`0,QuikGraph.SEquatableEdge{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{`0}}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{QuikGraph.SEquatableEdge{`0}}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.Clone">
            <summary>
            Clones this graph.
            </summary>
            <returns>Cloned graph.</returns>
        </member>
        <member name="M:QuikGraph.CompressedSparseRowGraph`1.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.DelegateBidirectionalIncidenceGraph`2">
            <summary>
            A delegate-based directed bidirectional graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.DelegateBidirectionalIncidenceGraph`2.#ctor(QuikGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},QuikGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.DelegateBidirectionalIncidenceGraph`2"/> class.
            </summary>
            <param name="tryGetOutEdges">Getter of out-edges.</param>
            <param name="tryGetInEdges">Getter of in-edges.</param>
            <param name="allowParallelEdges">
            Indicates if parallel edges are allowed.
            Note that get of edges is delegated so you may have bugs related
            to parallel edges due to the delegated implementation.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetOutEdges"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetInEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:QuikGraph.DelegateBidirectionalIncidenceGraph`2._tryGetInEdgesFunc">
            <summary>
            Getter of in-edges.
            </summary>
        </member>
        <member name="M:QuikGraph.DelegateBidirectionalIncidenceGraph`2.IsInEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateBidirectionalIncidenceGraph`2.InDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateBidirectionalIncidenceGraph`2.InEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateBidirectionalIncidenceGraph`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateBidirectionalIncidenceGraph`2.InEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateBidirectionalIncidenceGraph`2.Degree(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.DelegateImplicitGraph`2">
            <summary>
            A delegate-based directed implicit graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.DelegateImplicitGraph`2.#ctor(QuikGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.DelegateImplicitGraph`2"/> class.
            </summary>
            <param name="tryGetOutEdges">Getter of out-edges.</param>
            <param name="allowParallelEdges">
            Indicates if parallel edges are allowed.
            Note that get of edges is delegated so you may have bugs related
            to parallel edges due to the delegated implementation.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:QuikGraph.DelegateImplicitGraph`2._tryGetOutEdgesFunc">
            <summary>
            Getter of out-edges.
            </summary>
        </member>
        <member name="P:QuikGraph.DelegateImplicitGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateImplicitGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.DelegateImplicitUndirectedGraph`2">
            <summary>
            A delegate-based undirected implicit graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.#ctor(QuikGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.DelegateImplicitUndirectedGraph`2"/> class.
            </summary>
            <param name="tryGetAdjacentEdges">Getter of adjacent edges.</param>
            <param name="allowParallelEdges">
            Indicates if parallel edges are allowed.
            Note that get of edges is delegated so you may have bugs related
            to parallel edges due to the delegated implementation.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetAdjacentEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.DelegateImplicitUndirectedGraph`2.EdgeEqualityComparer">
            <inheritdoc />
        </member>
        <member name="F:QuikGraph.DelegateImplicitUndirectedGraph`2._tryGetAdjacencyEdges">
            <summary>
            Getter of adjacent edges.
            </summary>
        </member>
        <member name="P:QuikGraph.DelegateImplicitUndirectedGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateImplicitUndirectedGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.AdjacentDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.IsAdjacentEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.AdjacentEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.AdjacentEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.TryGetAdjacentEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get adjacent edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="edges">Edges found, otherwise <see langword="null"/>.</param>
            <returns>True if <paramref name="vertex"/> was found or/and edges were found, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.DelegateImplicitUndirectedGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.DelegateIncidenceGraph`2">
            <summary>
            A delegate-based directed incidence graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.DelegateIncidenceGraph`2.#ctor(QuikGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.DelegateIncidenceGraph`2"/> class.
            </summary>
            <param name="tryGetOutEdges">Getter of out-edges.</param>
            <param name="allowParallelEdges">
            Indicates if parallel edges are allowed.
            Note that get of edges is delegated so you may have bugs related
            to parallel edges due to the delegated implementation.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.DelegateIncidenceGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateIncidenceGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateIncidenceGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.DelegateUndirectedGraph`2">
            <summary>
            A delegate-based undirected graph data structure.
            This graph is vertex immutable.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.DelegateUndirectedGraph`2.#ctor(System.Collections.Generic.IEnumerable{`0},QuikGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.DelegateUndirectedGraph`2"/> class.
            </summary>
            <param name="vertices">Graph vertices.</param>
            <param name="tryGetAdjacentEdges">Getter of adjacent edges.</param>
            <param name="allowParallelEdges">
            Indicates if parallel edges are allowed.
            Note that get of edges is delegated so you may have bugs related
            to parallel edges due to the delegated implementation.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetAdjacentEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.DelegateUndirectedGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateUndirectedGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateUndirectedGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateUndirectedGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateUndirectedGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateUndirectedGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateUndirectedGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateUndirectedGraph`2.ContainsVertexInternal(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateUndirectedGraph`2.IsInGraph(`1,`0)">
            <summary>
            Checks if the given <paramref name="edge"/> is part of the graph
            by checking if the other vertex of the edge is also in the graph.
            It requires to have been checked if <paramref name="vertex"/> is
            in the graph before.
            </summary>
        </member>
        <member name="M:QuikGraph.DelegateUndirectedGraph`2.ContainsEdgeInternal(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateUndirectedGraph`2.AdjacentEdgesInternal(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateUndirectedGraph`2.TryGetAdjacentEdgesInternal(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.DelegateVertexAndEdgeListGraph`2">
            <summary>
            A delegate-based directed graph data structure.
            This graph is vertex immutable.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:QuikGraph.DelegateVertexAndEdgeListGraph`2.#ctor(System.Collections.Generic.IEnumerable{`0},QuikGraph.TryFunc{`0,System.Collections.Generic.IEnumerable{`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.DelegateVertexAndEdgeListGraph`2"/> class.
            </summary>
            <param name="vertices">Graph vertices.</param>
            <param name="tryGetOutEdges">Getter of out-edges.</param>
            <param name="allowParallelEdges">
            Indicates if parallel edges are allowed.
            Note that get of edges is delegated so you may have bugs related
            to parallel edges due to the delegated implementation.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tryGetOutEdges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.DelegateVertexAndEdgeListGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateVertexAndEdgeListGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateVertexAndEdgeListGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateVertexAndEdgeListGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateVertexAndEdgeListGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.DelegateVertexAndEdgeListGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateVertexAndEdgeListGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateVertexAndEdgeListGraph`2.ContainsVertexInternal(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateVertexAndEdgeListGraph`2.IsInGraph(`1,`0)">
            <summary>
            Checks if the given <paramref name="edge"/> is part of the graph
            by checking if the other vertex of the edge is also in the graph.
            It requires to have been checked if <paramref name="vertex"/> is
            in the graph before.
            </summary>
        </member>
        <member name="M:QuikGraph.DelegateVertexAndEdgeListGraph`2.ContainsEdgeInternal(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateVertexAndEdgeListGraph`2.OutEdgesInternal(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.DelegateVertexAndEdgeListGraph`2.TryGetOutEdgesInternal(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.EdgeListGraph`2">
            <summary>
            Mutable edge list graph data structure.
            </summary>
            <remarks>Only mutable by its edges, vertices are not stored but computed on demand.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EdgeListGraph`2"/> class.
            </summary>
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.EdgeListGraph`2"/> class.
            </summary>
            <param name="isDirected">Indicates if the graph is directed.</param>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.EdgeListGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.AddVerticesAndEdge(`1)">
            <summary>
            Adds <paramref name="edge"/> and its vertices to this graph.
            </summary>
            <param name="edge">The edge to add.</param>
            <returns>True if the edge was added, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a set of edges (and it's vertices if necessary).
            </summary>
            <param name="edges">Edges to add.</param>
            <returns>The number of edges added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.AddEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.EdgeListGraph`2.EdgeAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.OnEdgeAdded(`1)">
            <summary>
            Called on each added edge.
            </summary>
            <param name="edge">Added edge.</param>
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.RemoveEdge(`1)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.EdgeListGraph`2.EdgeRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.OnEdgeRemoved(`1)">
            <summary>
            Called on each removed edge.
            </summary>
            <param name="edge">Removed edge.</param>
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.RemoveEdgeIf(QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.Clone">
            <summary>
            Clones this graph.
            </summary>
            <returns>Cloned graph.</returns>
        </member>
        <member name="M:QuikGraph.EdgeListGraph`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.ReversedBidirectionalGraph`2">
            <summary>
            Mutable reversed bidirectional graph data structure.
            </summary>
            <remarks>It is mutable via the original graph.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.ReversedBidirectionalGraph`2"/> class.
            </summary>
            <param name="originalGraph">Original graph to reverse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="originalGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.OriginalGraph">
            <summary>
            Original graph.
            </summary>
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.ReversedBidirectionalGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.ContainsEdge(QuikGraph.SReversedEdge{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.TryGetEdge(`0,`0,QuikGraph.SReversedEdge{`0,`1}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{QuikGraph.SReversedEdge{`0,`1}}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.IsOutEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.OutDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.OutEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{QuikGraph.SReversedEdge{`0,`1}}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.OutEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.InEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.InEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.IsInEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.InDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{QuikGraph.SReversedEdge{`0,`1}}@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.ReversedBidirectionalGraph`2.Degree(`0)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.UndirectedBidirectionalGraph`2">
            <summary>
            Mutable bidirectional undirected graph data structure.
            </summary>
            <remarks>It is mutable via the wrapped graph.</remarks>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.#ctor(QuikGraph.IBidirectionalGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.UndirectedBidirectionalGraph`2"/> class.
            </summary>
            <param name="originalGraph">Bidirectional graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="originalGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.EdgeEqualityComparer">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.OriginalGraph">
            <summary>
            Underlying bidirectional graph.
            </summary>
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedBidirectionalGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.AdjacentEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.AdjacentDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.IsAdjacentEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.AdjacentEdge(`0,System.Int32)">
            <summary>
            <see cref="M:QuikGraph.UndirectedBidirectionalGraph`2.AdjacentEdge(`0,System.Int32)"/> is not supported for this kind of graph.
            </summary>
            <exception cref="T:System.NotSupportedException">This operation is not supported.</exception>
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedBidirectionalGraph`2.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:QuikGraph.UndirectedGraph`2">
            <summary>
            Mutable undirected graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type</typeparam>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.UndirectedGraph`2"/> class.
            </summary>
            <remarks>Allow parallel edges and gets the best edge equality comparer.</remarks>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.UndirectedGraph`2"/> class.
            </summary>
            <remarks>Gets the best edge equality comparer.</remarks>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.#ctor(System.Boolean,QuikGraph.EdgeEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuikGraph.UndirectedGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="edgeEqualityComparer">Equality comparer to use to compare edges.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeEqualityComparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.EdgeEqualityComparer">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.EdgeCapacity">
            <summary>
            Gets or sets the edge capacity.
            </summary>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AdjacentVertices(`0)">
            <summary>
            Gets the set of vertices adjacent to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get adjacent ones.</param>
            <returns>Set of adjacent vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.IsDirected">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.AllowParallelEdges">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.IsVerticesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.Vertices">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.ContainsVertex(`0)">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.IsEdgesEmpty">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.EdgeCount">
            <inheritdoc />
        </member>
        <member name="P:QuikGraph.UndirectedGraph`2.Edges">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.ContainsEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.ContainsEdge(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AdjacentEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AdjacentDegree(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.IsAdjacentEdgesEmpty(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AdjacentEdge(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.TryGetEdge(`0,`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.TrimEdgeExcess">
            <summary>
            Trims excess storage allocated for edges.
            </summary>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.Clear">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.UndirectedGraph`2.VertexAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.OnVertexAdded(`0)">
            <summary>
            Called on each added vertex.
            </summary>
            <param name="vertex">Added vertex.</param>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AddVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.UndirectedGraph`2.VertexRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.OnVertexRemoved(`0)">
            <summary>
            Called for each removed vertex.
            </summary>
            <param name="vertex">Removed vertex.</param>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.RemoveVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.RemoveVertexIf(QuikGraph.VertexPredicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.RemoveAdjacentEdgeIf(`0,QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.ClearAdjacentEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.ClearEdges(`0)">
            <summary>
            Clears edges of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AddVerticesAndEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AddEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.UndirectedGraph`2.EdgeAdded">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.OnEdgeAdded(`1)">
            <summary>
            Called on each added edge.
            </summary>
            <param name="edge">Added edge.</param>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.RemoveEdge(`1)">
            <inheritdoc />
        </member>
        <member name="E:QuikGraph.UndirectedGraph`2.EdgeRemoved">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.OnEdgeRemoved(`1)">
            <summary>
            Called on each removed edge.
            </summary>
            <param name="edge">Removed edge.</param>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.RemoveEdgeIf(QuikGraph.EdgePredicate{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.RemoveEdges(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes the given set of edges.
            </summary>
            <param name="edges">Edges to remove.</param>
            <returns>The number of removed edges.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during runtime serialization.
            </summary>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the data to serialize.
            </summary>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.Clone">
            <summary>
            Clones this graph.
            </summary>
            <returns>Cloned graph.</returns>
        </member>
        <member name="M:QuikGraph.UndirectedGraph`2.System#ICloneable#Clone">
            <inheritdoc />
        </member>
    </members>
</doc>
