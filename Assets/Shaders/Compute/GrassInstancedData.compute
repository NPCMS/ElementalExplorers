// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MeshProperties
{
    float4x4 PositionMatrix;
    float4x4 InversePositionMatrix;
};

SamplerState SmpClampTrilinear;

AppendStructuredBuffer<MeshProperties> Result;
float _Size;
float _Scale;
float _Jitter;
float _MinScale;
float _MaxScale;

Texture2D<float> _Clumping;
float _ClumpAmount;

//https://gist.github.com/mattatz/86fff4b32d198d0928d0fa4ff32cf6fa
float4x4 inverse(float4x4 m) {
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}

float2 GetClump(float2 uv, out float base)
{
    float width, height;
    _Clumping.GetDimensions(width, height);
    base = _Clumping.SampleLevel(SmpClampTrilinear, uv, 0);
    float2 clump = float2(_Clumping.SampleLevel(SmpClampTrilinear, uv + float2(1 / width, 0), 0) - base, _Clumping.SampleLevel(SmpClampTrilinear, uv + float2(0, 1 / height), 0) - base);
    return clump * _ClumpAmount;
}

float RandomRange(float2 Seed, float Min, float Max)
{
    float randomno =  frac(sin(dot(Seed, float2(12.9898, 78.233)))*43758.5453);
    return lerp(Min, Max, randomno);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    MeshProperties data;
    float2 uv = float2(id.x, id.y) / _Size;
    float scaleFactor;
    float2 clump = GetClump(uv, scaleFactor);
    float3 pos = _Scale * float3(uv.x, 0, uv.y) + float3(clump.x, 0, clump.y);

    if (pos.x < 0 || pos.z < 0 || pos.x > _Scale || pos.z > _Scale)
    {
        return;
    }

    pos -= float3(_Scale, 0, _Scale) / 2;
        
    float4x4 translate = 
    {
        1.f,0.f,0.f,pos.x,
        0.f,1.f,0.f,pos.y, 
        0.f,0.f,1.f,pos.z,
        0.f,0.f,0.f,1.f
    };


    float angle = RandomRange(uv, -3.41, 3.41);
    float sinAngle = sin(angle);
    float cosAngle = cos(angle);
    
    float4x4 rotation =
    {
        cosAngle,0.f,-sinAngle,0.f,
        0.f,1.f,0.f,0.f,
        sinAngle,0.f,cosAngle,0.f,
        0.f,0.f,0.f,1.f
    };
    float scaleAmount = lerp(_MinScale, _MaxScale, scaleFactor);
    float4x4 scale =
    {
        scaleAmount,0.f,0.f,0.f,
        0.f,scaleAmount,0.f,0.f,
        0.f,0.f,scaleAmount,0.f,
        0.f,0.f,0.f,1
    };

    float4x4 mat = mul(translate, mul(rotation, scale));

    data.PositionMatrix = mat;
    data.InversePositionMatrix = inverse(mat);
    Result.Append(data);

}
