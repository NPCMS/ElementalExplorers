// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
//#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"

#pragma multi_compile _ USING_VR
#pragma multi_compile_local _ TILED

struct MeshProperties
{
    float4x4 PositionMatrix;
    float4x4 InversePositionMatrix;
};

SamplerState SmpMirrorTrilinear;

AppendStructuredBuffer<MeshProperties> Result;
// RWStructuredBuffer<MeshProperties> Result;
float _CellSize;
float _TerrainWidth;
float _TerrainResolution;
float _Size;
float _ScaleJitter;
float _MinScale;
float _MaxScale;
float _FOV;

float3 _CameraPosition;
float3 _CameraForward;

float4 _Frustrum;
uint _Length;

float4 _BoundingBox;

Texture2D<float3> _Clumping;
float _ClumpAmount;

#if TILED
Texture2DArray<float> _Heightmap;
Texture2DArray<float> _Mask;
float4 _TileSizes[16];
float _MinHeight;
float _HeightScale;
uint _TileWidth;
uint _TileHeight;
#else
Texture2D<float> _Heightmap;
Texture2D<float> _Mask;
float _MinHeight;
float _HeightScale;
#endif

#if USING_VR
Texture2DArray<float> _CameraDepthTexture;
float4x4 _Projection;
#else
Texture2D<float> _CameraDepthTexture;
float4x4 _Projection;
#endif
SamplerState sampler_CameraDepthTexture;


float _Width;
float _MaxWidth;
float _WidthScaling;

float _SkipAmount;
float _SkipOffset;
float _SkipDistance;

float _BillboardDistance;

float _FrustrumCullingThreshold;
float _OcclusionCullingThreshold;

//https://gist.github.com/mattatz/86fff4b32d198d0928d0fa4ff32cf6fa
float4x4 inverse(float4x4 m) {
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}

float RandomRange(float2 Seed, float Min, float Max)
{
    float randomno =  frac(sin(dot(Seed, float2(12.9898, 78.233)))*43758.5453);
    return lerp(Min, Max, randomno);
}

float2 GetClump(float2 uv, out float base)
{
    float width, height;
    _Clumping.GetDimensions(width, height);
    float3 smp = _Clumping.SampleLevel(SmpMirrorTrilinear, uv, 0);
    base = smp.y;
    return smp.xz * _ClumpAmount + float2(RandomRange(uv + 125.0f, -_CellSize, _CellSize), RandomRange(uv - 125.0f, -_CellSize, _CellSize));
}

//https://answers.unity.com/questions/1642900/how-is-terrainsampleheight-implemented.html
float3 GetVertexLocalPos(float2 pos, float textureIndex)
{
    float height = _Heightmap.Load(uint4(pos.xy, textureIndex, 0));
    return float3(pos.x / (_TerrainResolution - 1) * _TerrainWidth, height, pos.y / (_TerrainResolution - 1) * _TerrainWidth);

}

float SampleHeight(float2 localPos, float textureIndex)
{
    float2 uv = localPos / _TerrainWidth;
    float2 samplePos = uv * float(_TerrainResolution - 1);
    float2 sampleFloor = floor(samplePos);
    float2 sampleDecimal = samplePos - sampleFloor;
    uint upperLeftTri = sampleDecimal.y > sampleDecimal.x ? 1 : 0;

    float3 v0 = GetVertexLocalPos(sampleFloor, textureIndex);
    float3 v1 = GetVertexLocalPos(sampleFloor + 1, textureIndex);

    float2 upperLeftOrLowerRight = float2(sampleFloor.x + 1 - upperLeftTri, sampleFloor.y + upperLeftTri);
    float3 v2 = GetVertexLocalPos(upperLeftOrLowerRight, textureIndex);
    float3 n = cross(v1 - v0, v2 - v0);
    return ((-n.x * (localPos.x - v0.x) - n.z * (localPos.y - v0.z)) / n.y) + v0.y;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x + id.y * _Size;
    // float yIndex = floor(float(index) / abs(_BoundingBox.z));
    // float2 uv = float2(index - yIndex * abs(_BoundingBox.z), yIndex);
    // float3 pos = float3(_BoundingBox.x, 0, _BoundingBox.y) + float3(uv.x * sign(_BoundingBox.z), 0, uv.y * sign(_BoundingBox.w)) * _CellSize;

    uint width = _Size * _Size / _Length;
    uint fwd = floor(index / width);
    uint lateral = index - fwd * width;
    float2 x = float2(floor(lateral / 2), lateral % 2);
    float mult;
    float vertical;
    //diagnoal
    if (_Frustrum.y > 0.5f)
    {
        vertical = lerp(0, 1, x.y);
        //vertical
        if (_Frustrum.z > 0.5f)
        {
            //horizontal
            //NE
            if (_Frustrum.w > 0.5f)
            {
                mult = -1;
            }
            //NW
            else
            {
                mult = lerp(-1, 1, x.y);
            }
        }
        else
        {
            //horizontal
            //SE
            if (_Frustrum.w > 0.5f)
            {
                mult = lerp(1, -1, x.y);
            }
            //SW
            else
            {
                mult = 1;
            }
        }
    }
    else
    {
        //N E S W
        vertical = _Frustrum.x;
        mult = lerp(-1, 1, x.y);
    }

    //float skip = max(0, vertical - _SkipDistance * _Size * _Size);
    //vertical = skip > 0 && (float(skip) * 225.2519f) % 32 < (_SkipOffset + _SkipAmount * skip) ? (2 - _SkipDistance) * vertical + skip : vertical;

    float3 offset = (_CameraForward * fwd + float3(x.x * vertical * mult, 0, x.x * (1.0f - vertical) * mult)) * _CellSize;
    float3 pos = _CameraPosition + offset;

    float distance = max(0.0f, length(offset) * _SkipDistance - _SkipOffset);
    float3 cellIndex = floor(pos / _CellSize);
    if (fmod(cellIndex.x * 10295.105f, _SkipAmount) < distance || fmod(cellIndex.z * 2298.805f, _SkipAmount) < distance)
    {
        return;
    }
    pos = cellIndex * _CellSize;
    float2 uv = pos.xz / _TerrainWidth;
    #if TILED
    float2 texIndex2D = floor(float2(uv));
    float textureIndex = texIndex2D.x + _TileWidth * texIndex2D.y;

    if (min(texIndex2D.x, texIndex2D.y) < 0.0f || texIndex2D.x >= _TileWidth || texIndex2D.y >= _TileHeight)
    {
        return;
    }

    #else
    float textureIndex = 0;
    if (min(pos.x, pos.z) < 0 || max(pos.x, pos.z) > _TerrainWidth || _Mask.SampleLevel(SmpMirrorTrilinear, uv, 0).r <= 0.5f)
    {
        return;
    }
    float minHeight = _MinHeight;
    float heightScale = _HeightScale;
    #endif

    float density = SAMPLE_TEXTURE2D_ARRAY_LOD(_Mask, SmpMirrorTrilinear, fmod(uv, 1), textureIndex, 0).r;
    
    float scaleFactor;
    float2 clump = GetClump(uv, scaleFactor);
    pos += float3(clump.x, 0, clump.y);
    if (density <= RandomRange(pos.xz, 0.0f, 1.0f))
    {
        return;
    }
    uv = pos.xz / _TerrainWidth;
#if TILED
    texIndex2D = floor(float2(uv));
    textureIndex = texIndex2D.x + _TileWidth * texIndex2D.y;
    float minHeight = _TileSizes[textureIndex].x;
    float heightScale = _TileSizes[textureIndex].y;
#endif
    float2 localPos = fmod(pos.xz, _TerrainWidth);
    pos.y = minHeight + heightScale * SampleHeight(localPos, textureIndex);

    float4 proj = ComputeClipSpacePosition(pos, _Projection);

#if UNITY_UV_STARTS_AT_TOP
    proj.y = -proj.y;
#endif
    
    proj.xy *= rcp(proj.w);
    proj.xy = proj.xy * 0.5 + 0.5;

#if UNITY_UV_STARTS_AT_TOP
    proj.y = 1.0f - proj.y;
#endif
    
    float depth = Linear01Depth(SAMPLE_TEXTURE2D_X_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, float3(proj.xy, 0), 0).r, _ZBufferParams);
    float z = (proj.z - _ProjectionParams.y) / (_ProjectionParams.z - _ProjectionParams.y);
    float diff = z - depth;
// #if USING_VR
//     float depth = Linear01Depth(SAMPLE_TEXTURE2D_X_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, float3(proj.xy, 0), 0).r, _ZBufferParams);
//     float z = (proj.z - _ProjectionParams.y) / (_ProjectionParams.z - _ProjectionParams.y);
//     float diff = z - depth;
//     
// #else
//     float depth = Linear01Depth(SAMPLE_TEXTURE2D_X_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, proj.xy, 0).r, _ZBufferParams);
//     float z = (proj.z - _ProjectionParams.y) / (_ProjectionParams.z - _ProjectionParams.y);
//     float diff = z - depth;
// #endif
    
    if (max(0, diff) > _OcclusionCullingThreshold || proj.z < -_FrustrumCullingThreshold || min(proj.x, proj.y) < -(1.0f + _FrustrumCullingThreshold) || max(proj.x, proj.y) > (1.0f + _FrustrumCullingThreshold))
    {
        return;
    }
    
    float angle = RandomRange(pos.xz, -3.14f, 3.14f);
    float4x4 translate = 
    {
        1.f,0.f,0.f,pos.x,
        0.f,1.f,0.f,pos.y, 
        0.f,0.f,1.f,pos.z,
        0.f,0.f,0.f,1.f
    };

    //billboard
    float2 dir = pos.xz - _CameraPosition.xz;
    float faceAngle = atan2(dir.y, dir.x) + 1.57f;
    angle = lerp(angle, faceAngle, saturate(float(index) * _BillboardDistance));
    
    float sinAngle = sin(angle);
    float cosAngle = cos(angle);
    
    float4x4 rotation =
    {
        cosAngle,0.f,-sinAngle,0.f,
        0.f,1.f,0.f,0.f,
        sinAngle,0.f,cosAngle,0.f,
        0.f,0.f,0.f,1.f
    };
    float scaleAmount = lerp(_MinScale, _MaxScale, scaleFactor * density) + RandomRange(pos.xz, -_ScaleJitter, _ScaleJitter);
    float scaleWidth = min(_MaxWidth, _Width + length(offset) * _WidthScaling);
    
    float4x4 scale =
    {
        scaleWidth, 0.f,0.f,0.f,
        0.f,scaleAmount,0.f,0.f,
        0.f,0.f,scaleWidth,0.f,
        0.f,0.f,0.f,1
    };

    float4x4 mat = mul(translate, mul(rotation, scale));

    MeshProperties data;
    data.PositionMatrix = mat;
    data.InversePositionMatrix = inverse(mat);
    Result.Append(data);
    // Result[id.x + id.y * _Size] = data;

}
