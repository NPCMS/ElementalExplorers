// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
//#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"

#pragma multi_compile _ USING_VR

struct MeshProperties
{
    float4x4 PositionMatrix;
    float4x4 InversePositionMatrix;
};

SamplerState SmpMirrorBilinear;

RWStructuredBuffer<MeshProperties> Input;
AppendStructuredBuffer<MeshProperties> Result;

float3 _CameraPosition;
float3 _CameraForward;

#if USING_VR
Texture2DArray<float> _CameraDepthTexture;
RWStructuredBuffer<MeshProperties> Counter;
#else
Texture2D<float> _CameraDepthTexture;
#endif
float4x4 _Projection;
SamplerState sampler_CameraDepthTexture;

float _OcclusionCullingThreshold;
float _FrustrumCullingThreshold;
float _DistanceThreshold;

uint _BufferLength;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= _BufferLength)
    {
        return;
    }
    MeshProperties data = Input[index];
    float3 pos = mul(data.PositionMatrix, float4(0,0,0,1)).xyz;
    
    float4 proj = ComputeClipSpacePosition(pos, _Projection);

#if UNITY_UV_STARTS_AT_TOP
    proj.y = -proj.y;
#endif
    
    proj.xy *= rcp(proj.w);
    proj.xy = proj.xy * 0.5 + 0.5;

#if UNITY_UV_STARTS_AT_TOP
    proj.y = 1.0f - proj.y;
#endif

    if (proj.z < -_FrustrumCullingThreshold || proj.z > _DistanceThreshold || min(proj.x, proj.y) < -(1.0f + _FrustrumCullingThreshold) || max(proj.x, proj.y) > (1.0f + _FrustrumCullingThreshold))
    {
        return;
    }
    
    float depth = Linear01Depth(SAMPLE_TEXTURE2D_X_LOD(_CameraDepthTexture, sampler_CameraDepthTexture, float3(proj.xy, 0), 0).r, _ZBufferParams);
    float z = (proj.z - _ProjectionParams.y) / (_ProjectionParams.z - _ProjectionParams.y);
    float diff = z - depth;
    
    if (max(0, diff) > _OcclusionCullingThreshold)
    {
        return;
    }
    #if USING_VR
        Counter.IncrementCounter();
        Counter.IncrementCounter();
    #endif
    Result.Append(data);

}
